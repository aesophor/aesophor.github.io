{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "{software,reverse} engineer",
    "home_page_url": "https://aesophor.github.io",
    "items": [
        {
            "id": "https://aesophor.github.io/2020/07/20/0x00-Arch-Linux-on-MacBook-Pro-11-2-with-Custom-NVMe-M-2-SSD/",
            "url": "https://aesophor.github.io/2020/07/20/0x00-Arch-Linux-on-MacBook-Pro-11-2-with-Custom-NVMe-M-2-SSD/",
            "title": "0x00 Arch Linux on MacBook Pro 11,2 with Custom NVMe M.2 SSD",
            "date_published": "2020-07-20T10:48:46.000Z",
            "content_html": "<p><img data-src=\"banner.jpg\" alt=\"banner\"></p>\n<br>\n<h2 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h2>\n<p>The only laptop I own is Apple’s <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9rYi9zcDcwND9sb2NhbGU9ZW5fVVM=\">MacBook Pro Retina 15&quot; (late 2014)</span>,<br>\non which I’ve run Gentoo Linux for about three years. Recently, I replaced my MacBook’s SSD with<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2Ftc3VuZy5jb20vc2VtaWNvbmR1Y3Rvci9taW5pc2l0ZS9zc2QvcHJvZHVjdC9jb25zdW1lci85NzBldm9wbHVzLw==\">Samsung’s 970 EVO Plus NVMe M.2 SSD (1TB)</span><br>\nand decided to install Arch Linux on it.</p>\n<br>\n<h2 id=\"back-up-the-old-ssd\"><a class=\"markdownIt-Anchor\" href=\"#back-up-the-old-ssd\">#</a> Back Up the Old SSD</h2>\n<p>I booted into a  <code>Gentoo Live USB</code>  and used  <code>dd</code>  to back up my entire old SSD to an image file.</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ <span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/sda <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/mnt/external_drive/old_ssd.img <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>4M</pre></td></tr></table></figure><p>Later on, after the new NVMe M.2 SSD has been installed, I could mount my external hard drive<br>\non  <code>/mnt/external_drive</code>  and run the following commands to copy all my data from the image file to<br>\nthe new SSD. The only drawback of this approach is that I have to manually resize the partitions later.</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ <span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/mnt/external_drive/old_ssd.img <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/dev/nvme0n1 <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>4M</pre></td></tr></table></figure><br>\n<h2 id=\"firmware-upgrade\"><a class=\"markdownIt-Anchor\" href=\"#firmware-upgrade\">#</a> Firmware Upgrade</h2>\n<p>Before installing NVMe M.2 SSD on your MacBook, make sure that you’ve upgraded to <strong>macOS Mojave<br>\nwhich includes the firmware required to boot from NVMe M.2 SSD</strong>.</p>\n<br>\n<h2 id=\"ssd-upgrade\"><a class=\"markdownIt-Anchor\" href=\"#ssd-upgrade\">#</a> SSD Upgrade</h2>\n<blockquote>\n<p><strong>CAUTION</strong><br><br>\nBe very careful with the screws. I stripped some of my screws due to the bloated batteries,<br>\nand ended up spending $3000 NTD (approx. $100 USD) for repairment.</p>\n</blockquote>\n<p>After upgrading to macOS Mojave, your MacBook should be able to recognize NVMe M.2 SSD from now on.<br>\nNow we can remove the screws on its back and install the new SSD.</p>\n<ul>\n<li>I bought the Screwdrivers + SSD Adapter on <span class=\"exturl\" data-url=\"aHR0cDovL3Nob3BlZS50dw==\">shopee.tw</span> -&gt; <a href=\"https://shopee.tw/product/4848951/1501356237\"><strong>Link</strong></a></li>\n</ul>\n<p><img data-src=\"swap.jpg\" alt=\"swap\"></p>\n<br>\n<h2 id=\"ssd-data-migration\"><a class=\"markdownIt-Anchor\" href=\"#ssd-data-migration\">#</a> SSD Data Migration</h2>\n<p>After upgrading my MacBook’s SSD, I installed macOS on it and used it for a week. However, being<br>\na long-term GNU/Linux user, I started to miss all that freedom and customizability offered by Linux.<br>\nTherefore, I decided to go back to Linux again.</p>\n<p>At first I used  <code>dd</code>  to clone all my data from the image file to the new SSD. However, this didn’t work<br>\nfor me, since <strong>I didn’t compile support for NVMe M.2 SSD into my gentoo linux kernel</strong>,<br>\nso although the disk was successfully migrated, I wasn’t able to boot from it.</p>\n<br>\n<h2 id=\"prepare-installation-medium\"><a class=\"markdownIt-Anchor\" href=\"#prepare-installation-medium\">#</a> Prepare Installation Medium</h2>\n<p>Instead of trying to recompile a new linux kernel with NVMe M.2 SSD support, I decided to leave<br>\nGentoo Linux this time. Gentoo is a beautiful Linux distribution (if you have time and patience),<br>\nbut after manually compiling all those packages for 3 years on this fucking MacBook,<br>\nI’ve already become kinda fed up with it.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXJjaGxpbnV4Lm9yZy9kb3dubG9hZC8=\">Download Arch Linux ISO</span> and prepare Arch Live USB:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ <span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/path/to/arch.iso <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/dev/sdX <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>4M</pre></td></tr></table></figure><p>Power off your MacBook, insert the USB stick, hold  <code>alt/option</code>  and power it on again.<br>\nNow you should see the option to boot from Arch Linux Live USB.</p>\n<br>\n<h2 id=\"base-installation\"><a class=\"markdownIt-Anchor\" href=\"#base-installation\">#</a> Base Installation</h2>\n<p>After booting from Arch Linux Live USB, you’ll be logged in as the root user.<br>\nTo get Internet connection, I simply plugged my Android phone into my Macbook simply via USB cable,<br>\nturned on  <code>USB Tethering</code> , and ran:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ dhcpcd</pre></td></tr></table></figure><p>Ensure the clock is accurate:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ timedatectl set-ntp <span class=\"token boolean\">true</span></pre></td></tr></table></figure><p>Run  <code>cfdisk /dev/nvme0n1</code>  and partition the new SSD as follows:</p>\n<pre><code>                                   Disk: /dev/nvme0n1\n                 Size: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors\n                Label: gpt, identifier: 85CF6A21-FC5C-408D-8532-8751C80F0593\n\nDevice                 Start          End        Sectors        Size Type\n/dev/nvme0n1p1          2048       411647         409600        200M EFI System             \n/dev/nvme0n1p2       411648    1953525134     1953113487      931.3G Linux filesystem\n</code></pre>\n<p>Now run  <code>lsblk</code>  and you’ll see something like this:</p>\n<pre><code>NAME               MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nnvme0n1            259:0    0 931.5G  0 disk  \n├─nvme0n1p1        259:1    0   200M  0 part  \n└─nvme0n1p2        259:2    0 931.3G  0 part  \n</code></pre>\n<p>Prepare LVM+LUKS on the new SSD:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ cryptsetup -v --cipher aes-xts-plain64 --key-size <span class=\"token number\">256</span> --hash sha1 --iter-time <span class=\"token number\">1000</span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            --use-random --verify-passphrase luksFormat /dev/nvme0n1p2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>root$ cryptsetup luksOpen /dev/nvme0n1p2 lvm</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>root$ pvcreate /dev/mapper/lvm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>root$ vgcreate vgcrypt /dev/mapper/lvm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>root$ lvcreate --size 30G --name root vgcrypt</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>root$ lvcreate --extents +100%FREE --name home vgcrypt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>root$ mkfs.fat -F32 /dev/nvme0n1p1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>root$ mkfs.ext4 /dev/mapper/vgcrypt-root</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>root$ mkfs.ext4 /dev/mapper/vgcrypt-home</pre></td></tr></table></figure><p>Now run  <code>lsblk</code>  again and you’ll see something like this:</p>\n<pre><code>NAME               MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nnvme0n1            259:0    0 931.5G  0 disk  \n├─nvme0n1p1        259:1    0   200M  0 part  \n└─nvme0n1p2        259:2    0 931.3G  0 part  \n  └─vgcrypt        254:0    0 931.3G  0 crypt \n    ├─vgcrypt-root 254:1    0    30G  0 lvm   \n    └─vgcrypt-home 254:2    0 901.3G  0 lvm   \n</code></pre>\n<p>Mount the partitions:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ <span class=\"token function\">mount</span> /dev/mapper/vgcrypt-root /mnt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root$ <span class=\"token function\">mkdir</span> -p /mnt/home</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>root$ <span class=\"token function\">mkdir</span> -p /mnt/boot</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>root$ <span class=\"token function\">mount</span> /dev/mapper/vgcrypt-home /mnt/home</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>root$ <span class=\"token function\">mount</span> /dev/nvme0n1p1 /mnt/boot</pre></td></tr></table></figure><p>Install the base system:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ pacstrap -i /mnt base base-devel linux linux-firmware lvm2</pre></td></tr></table></figure><p>Generate fstab:</p>\n<ul>\n<li><code>-L</code>  generates the fstab with labels instead of UUIDs since we’re using encrypted LVM disk.</li>\n<li><code>-p</code>  prevents pseudo-filesystems from being added.</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ genfstab -L -p /mnt <span class=\"token operator\">>></span> /mnt/etc/fstab</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root$ <span class=\"token function\">cat</span> /mnt/etc/fstab</pre></td></tr></table></figure><br>\n<h2 id=\"configure-the-new-system\"><a class=\"markdownIt-Anchor\" href=\"#configure-the-new-system\">#</a> Configure the New System</h2>\n<p>Chroot into our new system:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ arch-chroot /mnt /bin/bash</pre></td></tr></table></figure><p>Generate locales:</p>\n<ul>\n<li>uncomment the locales you’re going to use in /etc/locale.gen, and run  <code>locale-gen</code> .</li>\n<li>run  <code>echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</code>  to make ENG UTF-8 the default locale.</li>\n</ul>\n<p>Replace the default console font with terminus:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ pacman -S terminus-font</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root$ <span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">FONT</span><span class=\"token operator\">=</span>ter-v24n <span class=\"token operator\">></span> /etc/vconsole.conf</pre></td></tr></table></figure><p>Set timezone and set time to UTC:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ <span class=\"token function\">ln</span> -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root$ hwclock --systohc --utc</pre></td></tr></table></figure><p>To ensure the kernel loads the proper modules to decrypt root disk at startup,<br>\nwe have to add necessary hooks in  <code>/etc/mkinitcpio.conf</code> :</p>\n<pre><code>HOOKS=&quot;base udev autodetect modconf block consolefont encrypt lvm2 filesystems keyboard fsck&quot;\n</code></pre>\n<p>Regenerate the initramfs image to EFI Partition ( <code>/dev/nvme0n1p1</code> ):</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ <span class=\"token function\">mount</span> /dev/nvme0n1p1 /boot  <span class=\"token comment\"># just in case you forgot to do this</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root$ mkinitcpio -p linux</pre></td></tr></table></figure><p>Set hostname:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ <span class=\"token builtin class-name\">echo</span> allegro <span class=\"token operator\">></span> /etc/hostname</pre></td></tr></table></figure><p>Install systemd-boot as our bootloader:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ pacman -S dosfstools</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root$ bootctl --path<span class=\"token operator\">=</span>/boot <span class=\"token function\">install</span></pre></td></tr></table></figure><p>Add an boot entry for systemd-boot by editing  <code>/boot/loader/entries/arch.conf</code> :</p>\n<pre><code>title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\tcryptdevice=/dev/nvme0n1p2:vgcrypt root=/dev/mapper/vgcrypt-root rw\n</code></pre>\n<p>Change root user’s password:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ <span class=\"token function\">passwd</span></pre></td></tr></table></figure><p>Install additional packages:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ pacman -S dhcpcd <span class=\"token function\">git</span> <span class=\"token function\">zsh</span> <span class=\"token function\">vim</span> neovim <span class=\"token function\">wget</span> stow tmux</pre></td></tr></table></figure><p>Reboot:</p>\n<pre><code>root$ reboot\n</code></pre>\n<p>Add an unprivileged user:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root$ <span class=\"token function\">useradd</span> --create-home --groups wheel --shell /bin/zsh aesophor</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root$ <span class=\"token function\">passwd</span> aesophor</pre></td></tr></table></figure><p>Set up sudo:</p>\n<ul>\n<li>run  <code>visudo</code>  and uncomment the line  <code>%wheel ALL=(ALL) ALL</code> .</li>\n</ul>\n<br>\n<p>At this point, you may logout the root user and re-login with your unprivileged user.</p>\n<br>\n<h2 id=\"post-installation\"><a class=\"markdownIt-Anchor\" href=\"#post-installation\">#</a> Post Installation</h2>\n<p>Install <a href=\"https://github.com/Jguer/yay\"> <code>yay</code> </a>, an AUR helper:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ <span class=\"token function\">git</span> clone https://aur.archlinux.org/yay.git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user$ <span class=\"token builtin class-name\">cd</span> yay</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>user$ <span class=\"token function\">sudo</span> makepkg -si</pre></td></tr></table></figure><p>Install X and video drivers:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ <span class=\"token function\">sudo</span> pacman -S xf86-video-intel mesa-libgl libva-intel-driver libva</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user$ yay -S opencl-intel</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>user$ <span class=\"token function\">sudo</span> pacman -S xorg-server xorg-xinit xorg-apps</pre></td></tr></table></figure><p>Install  <code>xf86-input-mtrack</code>  as our trackpad driver:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ yay -S xf86-input-mtrack</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user$ <span class=\"token function\">sudo</span> <span class=\"token function\">wget</span> -O /etc/X11/xorg.conf.d/10-mtrack.conf https://raw.githubusercontent.com/aesophor/macbookpro-11-2-gentoo-config/master/etc/X11/xorg.conf.d/10mtrack.conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>user$ <span class=\"token function\">sudo</span> gpasswd -a aesophor input</pre></td></tr></table></figure><p>Install  <code>broadcom-wl-dkms</code>  as our Wi-Fi driver (my laptop model is A1398):</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ <span class=\"token function\">sudo</span> pacman -S dkms broadcom-wl-dkms</pre></td></tr></table></figure><p>Install  <code>bcwc-pcie-git</code>  as our FaceTimeHD webcam driver:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ yay -S bcwc-pcie-git</pre></td></tr></table></figure><p>Install font packages:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ <span class=\"token function\">sudo</span> pacman -S ttf-liberation wqy-zenhei wqy-bitmapfont</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user$ yay -S siji-git uw-ttyp0-font</pre></td></tr></table></figure><p>Get audio to work:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ <span class=\"token function\">sudo</span> pacman -S pulseaudio alsa-lib alsa-utils</pre></td></tr></table></figure><p>Install DE, WM, bar, etc:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ <span class=\"token function\">sudo</span> pacman -S plasma-desktop</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user$ yay -S wmderland-git polybar dunst picom rofi-git rxvt-unicode firefox</pre></td></tr></table></figure><p>Install fcitx5 input method:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ <span class=\"token function\">sudo</span> pacman -S fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-gtk fcitx5-qt fcitx5-material-color</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user$ yay -S fcitx5-pinyin-zhwiki</pre></td></tr></table></figure><p>Downgrade  <code>pango</code>  to 1.43 since &gt;= 1.44 cause issue with font rendering on rofi:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ <span class=\"token function\">sudo</span> pacman -U https://archive.archlinux.org/packages/p/pango/pango-1.43.0-1-x86_64.pkg.tar.xz</pre></td></tr></table></figure><p>Powersaving:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ yay -S powertop thermald cpupower mbpfan-git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user$ <span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> thermald.service</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>user$ <span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> cpupower.service</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>user$ <span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> mbpfan.service</pre></td></tr></table></figure><p>Finally, create systemd services that execute the following commands, respectively:</p>\n<ul>\n<li>echo ‘disable’ &gt; /sys/firmware/acpi/interrupts/gpe06  # fix kworker high cpu usage</li>\n<li>echo “XHC1” &gt; /proc/acpi/wakeup  # fix immediate wakeup after suspension on macbook</li>\n<li>setpci -v -H1 -s 00:01.00 BRIDGE_CONTROL=0  # enable keyboard backlight control</li>\n</ul>\n<br>\n<h2 id=\"enter-x11\"><a class=\"markdownIt-Anchor\" href=\"#enter-x11\">#</a> Enter X11</h2>\n<p>Install my dotfiles:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ <span class=\"token function\">git</span> clone https://github.com/aesophor/dotfiles.git ~/Dots</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user$ <span class=\"token builtin class-name\">cd</span> ~/Dots</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>user$ <span class=\"token function\">rm</span> ~/.zshrc ~/.bashrc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>user$ ./.install.sh</pre></td></tr></table></figure><p>Start an X11 session (GUI) as your unprivileged user:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user$ startx</pre></td></tr></table></figure><p>Voilà. Now you can go ahead and start customizing it!<br>\n<img data-src=\"result.png\" alt=\"\"></p>\n",
            "tags": [
                "linux"
            ]
        }
    ]
}