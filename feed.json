{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "{software,reverse} engineer",
    "home_page_url": "https://aesophor.github.io",
    "items": [
        {
            "id": "https://aesophor.github.io/2022/08/21/LC-0003-Longest-Substring-Without-Repeating-Characters/",
            "url": "https://aesophor.github.io/2022/08/21/LC-0003-Longest-Substring-Without-Repeating-Characters/",
            "title": "LC#0003 - Longest Substring Without Repeating Characters",
            "date_published": "2022-08-21T12:00:05.000Z",
            "content_html": "<h1 id=\"problem\"><a class=\"markdownIt-Anchor\" href=\"#problem\">#</a> Problem</h1>\n<p>給定一字串  <code>s</code> ，請找出不包含重複字元的 substring 的最長長度。</p>\n<h1 id=\"examples\"><a class=\"markdownIt-Anchor\" href=\"#examples\">#</a> Examples</h1>\n<pre><code>Input: s = &quot;abcabcbb&quot;\nOutput: 3\nExplanation: The answer is &quot;abc&quot;, with the length of 3.\n</code></pre>\n<pre><code>Input: s = &quot;bbbbb&quot;\nOutput: 1\nExplanation: The answer is &quot;b&quot;, with the length of 1.\n</code></pre>\n<pre><code>Input: s = &quot;pwwkew&quot;\nOutput: 3\nExplanation: The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</code></pre>\n<pre><code>Input: s = &quot;abba&quot;\nOutput: 2\nExplanation: The answer is &quot;ab&quot;, with the length of 2.\n</code></pre>\n<h1 id=\"solution\"><a class=\"markdownIt-Anchor\" href=\"#solution\">#</a> Solution</h1>\n<p><strong>Sliding Window Algorithm</strong></p>\n<p>維護兩個 index：  <code>l</code>  和  <code>r</code> ，分別代表 window 左界與右界，window 內的每個字元都是獨特的，不能重複。</p>\n<p>接著線性掃描字串  <code>s</code> ，不斷將右界往右擴展：</p>\n<ol>\n<li>若  <code>s[r]</code>  和 window 內某字元重複，且假設兩個重複字元在  <code>s</code>  中的 index 分別為 k 和 r，就將左界更新為  <code>k + 1</code></li>\n<li>計算 window 長度 (i.e., r - l + 1)，必要時更新 max_len</li>\n<li>紀錄  <code>s[r]</code>  最後一次出現時的 index</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> max_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> appearedCharIdx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// If `s[r]` has already appeared before, and `s[r]`</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// is within the current window, then we should adjust</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// the left window boundary.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>appearedCharIdx<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> appearedCharIdx<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        l <span class=\"token operator\">=</span> appearedCharIdx<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      max_len <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max_len<span class=\"token punctuation\">,</span> r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      appearedCharIdx<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token operator\">++</span>r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> max_len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"complexity-analysis\"><a class=\"markdownIt-Anchor\" href=\"#complexity-analysis\">#</a> Complexity Analysis</h1>\n<ul>\n<li><strong>Time: O(n)</strong> - sliding window 只需將 s 從頭到尾掃描一次</li>\n<li><strong>Space: O(n)</strong> - worst case 時 appearedCharIdx.size () 逼近 s.size ()</li>\n</ul>\n<h1 id=\"result\"><a class=\"markdownIt-Anchor\" href=\"#result\">#</a> Result</h1>\n<pre><code>Runtime: 11 ms, faster than 84.71% of C++ online submissions for Longest Substring Without Repeating Characters.\nMemory Usage: 8.1 MB, less than 82.70% of C++ online submissions for Longest Substring Without Repeating Characters.\n</code></pre>\n",
            "tags": [
                "leetcode",
                "sliding-window"
            ]
        },
        {
            "id": "https://aesophor.github.io/2022/08/21/LC-0002-Add-Two-Numbers/",
            "url": "https://aesophor.github.io/2022/08/21/LC-0002-Add-Two-Numbers/",
            "title": "LC#0002 - Add Two Numbers",
            "date_published": "2022-08-21T08:55:18.000Z",
            "content_html": "<h1 id=\"problem\"><a class=\"markdownIt-Anchor\" href=\"#problem\">#</a> Problem</h1>\n<p>給定兩條 singly linked lists： <code>l1</code>  和  <code>l2</code></p>\n<p>一條 linked list 代表一個數，比如 [3, 4, 5] 這樣的 linked list 表示數字 543。</p>\n<p>請將  <code>l1</code>  和  <code>l2</code>  所代表的數相加，然後依樣畫葫蘆製作一條全新的 linked list 回傳兩數之和。</p>\n<h1 id=\"examples\"><a class=\"markdownIt-Anchor\" href=\"#examples\">#</a> Examples</h1>\n<blockquote>\n<p>記得和考官確認 input linked list 是否可能為空</p>\n</blockquote>\n<pre><code>Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n</code></pre>\n<pre><code>Input: l1 = [0], l2 = [0]\nOutput: [0]\n</code></pre>\n<pre><code>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n</code></pre>\n<h1 id=\"solution\"><a class=\"markdownIt-Anchor\" href=\"#solution\">#</a> Solution</h1>\n<p>同時 traverse 兩條 linked lists，將目前走到的兩個節點的 value 做相加，並且記得處理進位。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode() : val(0), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ListNode <span class=\"token operator\">*</span><span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ListNode <span class=\"token operator\">*</span>l1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ListNode <span class=\"token operator\">*</span>l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">bool</span> carry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> digit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ListNode <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    ListNode <span class=\"token operator\">*</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">||</span> l2 <span class=\"token operator\">||</span> carry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      digit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        digit <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        carry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        digit <span class=\"token operator\">+=</span> l1<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        l1 <span class=\"token operator\">=</span> l1<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        digit <span class=\"token operator\">+=</span> l2<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        l2 <span class=\"token operator\">=</span> l2<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digit <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        digit <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        carry <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      ListNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span>digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        tail<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      tail <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"complexity-analysis\"><a class=\"markdownIt-Anchor\" href=\"#complexity-analysis\">#</a> Complexity Analysis</h1>\n<p>假設 l1 長度為  <code>m</code> ，l2 長度為  <code>n</code></p>\n<ul>\n<li><strong>Time: O(max(m, n))</strong> - 同時 traverse 兩個 list，所需時間為較長者</li>\n<li><strong>Space: O(max(m, n))</strong> - m digits + n digits 最多可能產生一個 (m+n+1) digits 的數</li>\n</ul>\n<h1 id=\"result\"><a class=\"markdownIt-Anchor\" href=\"#result\">#</a> Result</h1>\n<pre><code>Runtime: 46 ms, faster than 74.37% of C++ online submissions for Add Two Numbers.\nMemory Usage: 71.3 MB, less than 90.92% of C++ online submissions for Add Two Numbers.\n</code></pre>\n",
            "tags": [
                "leetcode",
                "linked-list"
            ]
        },
        {
            "id": "https://aesophor.github.io/2022/08/21/LC-0001-Two-Sums/",
            "url": "https://aesophor.github.io/2022/08/21/LC-0001-Two-Sums/",
            "title": "LC#0001 - Two Sums",
            "date_published": "2022-08-21T06:05:49.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>以前刷題總是不寫 writeup，漫無目標的亂刷，導致久了就會忘記解法。最近受到兩位 SQLab 學長的激勵，分別是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iY2xpbi50dy9hYm91dC8=\">Kevin Lin (bclin717)</span> 與 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1RvbW15V3UtZmRna2hka2do\">Tommy Wu (fdgkhdkgh)</span>，決定這輪刷題要養成好習慣：將解題過程記錄下來。</p>\n<h1 id=\"problem\"><a class=\"markdownIt-Anchor\" href=\"#problem\">#</a> Problem</h1>\n<p>給定一串數字  <code>nums</code> ，以及一個目標  <code>target</code> 。</p>\n<p>請從  <code>nums</code>  中找到兩個數字 s.t. 兩數之和為  <code>target</code> ，並回傳那兩數的 index。</p>\n<h1 id=\"solution\"><a class=\"markdownIt-Anchor\" href=\"#solution\">#</a> Solution</h1>\n<p><img data-src=\"fig.png\" alt=\"\"></p>\n<ol>\n<li>建一個 map：\n<ul>\n<li>key 為目前數字的 complement，即 target - 目前數字</li>\n<li>value 為目前數字的 index</li>\n</ul>\n</li>\n<li>線性掃描  <code>nums</code> ，假設目前掃描到的數字 index 為  <code>i</code> ，檢查 map 中是否存在 key =  <code>nums[i]</code>\n<ul>\n<li>若存在，返回兩個 index： <code>i</code>  與  <code>map[nums[i]]</code></li>\n<li>不存在，對 map 插入 { <code>target - nums[i]</code> ,  <code>i</code> }</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> complementIdx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>complementIdx<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span> complementIdx<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      complementIdx<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"complexity-analysis\"><a class=\"markdownIt-Anchor\" href=\"#complexity-analysis\">#</a> Complexity Analysis</h1>\n<ul>\n<li><strong>Time: O(n)</strong> - worst case 需要掃到尾才能找到答案</li>\n<li><strong>Space: O(n)</strong> - worst case 同上，map 需要存將近 n 個 entries</li>\n</ul>\n<h1 id=\"result\"><a class=\"markdownIt-Anchor\" href=\"#result\">#</a> Result</h1>\n<pre><code>Runtime: 7 ms, faster than 98.41% of C++ online submissions for Two Sum.\nMemory Usage: 11.2 MB, less than 18.59% of C++ online submissions for Two Sum.\n</code></pre>\n",
            "tags": [
                "leetcode"
            ]
        },
        {
            "id": "https://aesophor.github.io/2020/07/20/0x00-Arch-Linux-on-MacBook-Pro-11-2-with-Custom-NVMe-M-2-SSD/",
            "url": "https://aesophor.github.io/2020/07/20/0x00-Arch-Linux-on-MacBook-Pro-11-2-with-Custom-NVMe-M-2-SSD/",
            "title": "0x00 Arch Linux on MacBook Pro 11,2 with Custom NVMe M.2 SSD",
            "date_published": "2020-07-20T10:48:46.000Z",
            "content_html": "<p><img data-src=\"banner.jpg\" alt=\"banner\"></p>\n<h2 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h2>\n<p>The only laptop I own is Apple’s <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9rYi9zcDcwND9sb2NhbGU9ZW5fVVM=\">MacBook Pro Retina 15&quot; (late 2014)</span>, on which I’ve run Gentoo Linux for about three years. Recently, I replaced my MacBook’s SSD with <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2Ftc3VuZy5jb20vc2VtaWNvbmR1Y3Rvci9taW5pc2l0ZS9zc2QvcHJvZHVjdC9jb25zdW1lci85NzBldm9wbHVzLw==\">Samsung’s 970 EVO Plus NVMe M.2 SSD (1TB)</span> and decided to install Arch Linux on it.</p>\n<h2 id=\"back-up-the-old-ssd\"><a class=\"markdownIt-Anchor\" href=\"#back-up-the-old-ssd\">#</a> Back Up the Old SSD</h2>\n<p>I booted into a  <code>Gentoo Live USB</code>  and used  <code>dd</code>  to back up my entire old SSD to an image file.</p>\n<pre><code>root$ dd if=/dev/sda of=/mnt/external_drive/old_ssd.img bs=4M\n</code></pre>\n<p>Later on, after the new NVMe M.2 SSD has been installed, I could mount my external hard drive on  <code>/mnt/external_drive</code>  and run the following commands to copy all my data from the image file to the new SSD. The only drawback of this approach is that I have to manually resize the partitions later.</p>\n<pre><code>root$ dd if=/mnt/external_drive/old_ssd.img of=/dev/nvme0n1 bs=4M\n</code></pre>\n<h2 id=\"firmware-upgrade\"><a class=\"markdownIt-Anchor\" href=\"#firmware-upgrade\">#</a> Firmware Upgrade</h2>\n<p>Before installing NVMe M.2 SSD on your MacBook, make sure that you’ve upgraded to <strong>macOS Mojave which includes the firmware required to boot from NVMe M.2 SSD</strong>.</p>\n<h2 id=\"ssd-upgrade\"><a class=\"markdownIt-Anchor\" href=\"#ssd-upgrade\">#</a> SSD Upgrade</h2>\n<blockquote>\n<p><strong>CAUTION</strong><br><br>\nBe very careful with the screws. I stripped some of my screws due to the bloated batteries, and ended up spending $3000 NTD (approx. $100 USD) for repairment.</p>\n</blockquote>\n<p>After upgrading to macOS Mojave, your MacBook should be able to recognize NVMe M.2 SSD from now on. Now we can remove the screws on its back and install the new SSD. I bought the Screwdrivers + SSD Adapter on <span class=\"exturl\" data-url=\"aHR0cDovL3Nob3BlZS50dw==\">shopee.tw</span> -&gt; <a href=\"https://shopee.tw/product/4848951/1501356237\"><strong>Link</strong></a></p>\n<p><img data-src=\"swap.jpg\" alt=\"swap\"></p>\n<h2 id=\"ssd-data-migration\"><a class=\"markdownIt-Anchor\" href=\"#ssd-data-migration\">#</a> SSD Data Migration</h2>\n<p>After upgrading my MacBook’s SSD, I installed macOS on it and used it for a week. However, being a long-term GNU/Linux user, I started to miss all that freedom and customizability offered by Linux. Therefore, I decided to go back to Linux again.</p>\n<p>At first I used  <code>dd</code>  to clone all my data from the image file to the new SSD. However, this didn’t work for me, since <strong>I didn’t compile support for NVMe M.2 SSD into my gentoo linux kernel</strong>, so although the disk was successfully migrated, I wasn’t able to boot from it.</p>\n<h2 id=\"prepare-installation-medium\"><a class=\"markdownIt-Anchor\" href=\"#prepare-installation-medium\">#</a> Prepare Installation Medium</h2>\n<p>Instead of trying to recompile a new linux kernel with NVMe M.2 SSD support, I decided to leave Gentoo Linux this time. Gentoo is a beautiful Linux distribution (if you have time and patience), but after manually compiling all those packages for 3 years on this fucking MacBook, I’ve already become kinda fed up with it.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXJjaGxpbnV4Lm9yZy9kb3dubG9hZC8=\">Download Arch Linux ISO</span> and prepare Arch Live USB:</p>\n<pre><code>root$ dd if=/path/to/arch.iso of=/dev/sdX bs=4M\n</code></pre>\n<p>Power off your MacBook, insert the USB stick, hold  <code>alt/option</code>  and power it on again. Now you should see the option to boot from Arch Linux Live USB.</p>\n<h2 id=\"base-installation\"><a class=\"markdownIt-Anchor\" href=\"#base-installation\">#</a> Base Installation</h2>\n<p>After booting from Arch Linux Live USB, you’ll be logged in as the root user. To get Internet connection, I simply plugged my Android phone into my Macbook simply via USB cable, turned on  <code>USB Tethering</code> , and ran:</p>\n<pre><code>root$ dhcpcd\n</code></pre>\n<p>Ensure the clock is accurate:</p>\n<pre><code>root$ timedatectl set-ntp true\n</code></pre>\n<p>Run  <code>cfdisk /dev/nvme0n1</code>  and partition the new SSD as follows:</p>\n<pre><code>                                   Disk: /dev/nvme0n1\n                 Size: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors\n                Label: gpt, identifier: 85CF6A21-FC5C-408D-8532-8751C80F0593\n\nDevice                 Start          End        Sectors        Size Type\n/dev/nvme0n1p1          2048       411647         409600        200M EFI System             \n/dev/nvme0n1p2       411648    1953525134     1953113487      931.3G Linux filesystem\n</code></pre>\n<p>Now run  <code>lsblk</code>  and you’ll see something like this:</p>\n<pre><code>NAME               MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nnvme0n1            259:0    0 931.5G  0 disk  \n├─nvme0n1p1        259:1    0   200M  0 part  \n└─nvme0n1p2        259:2    0 931.3G  0 part  \n</code></pre>\n<p>Prepare LVM+LUKS on the new SSD:</p>\n<pre><code>root$ cryptsetup -v --cipher aes-xts-plain64 --key-size 256 --hash sha1 --iter-time 1000\\\n            --use-random --verify-passphrase luksFormat /dev/nvme0n1p2\nroot$ cryptsetup luksOpen /dev/nvme0n1p2 lvm\nroot$ pvcreate /dev/mapper/lvm\nroot$ vgcreate vgcrypt /dev/mapper/lvm\nroot$ lvcreate --size 30G --name root vgcrypt\nroot$ lvcreate --extents +100%FREE --name home vgcrypt\nroot$ mkfs.fat -F32 /dev/nvme0n1p1\nroot$ mkfs.ext4 /dev/mapper/vgcrypt-root\nroot$ mkfs.ext4 /dev/mapper/vgcrypt-home\n</code></pre>\n<p>Now run  <code>lsblk</code>  again and you’ll see something like this:</p>\n<pre><code>NAME               MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nnvme0n1            259:0    0 931.5G  0 disk  \n├─nvme0n1p1        259:1    0   200M  0 part  \n└─nvme0n1p2        259:2    0 931.3G  0 part  \n  └─vgcrypt        254:0    0 931.3G  0 crypt \n    ├─vgcrypt-root 254:1    0    30G  0 lvm   \n    └─vgcrypt-home 254:2    0 901.3G  0 lvm   \n</code></pre>\n<p>Mount the partitions:</p>\n<pre><code>root$ mount /dev/mapper/vgcrypt-root /mnt\nroot$ mkdir -p /mnt/home\nroot$ mkdir -p /mnt/boot\nroot$ mount /dev/mapper/vgcrypt-home /mnt/home\nroot$ mount /dev/nvme0n1p1 /mnt/boot\n</code></pre>\n<p>Install the base system:</p>\n<pre><code>root$ pacstrap -i /mnt base base-devel linux linux-firmware lvm2\n</code></pre>\n<p>Generate fstab:</p>\n<ul>\n<li><code>-L</code>  generates the fstab with labels instead of UUIDs since we’re using encrypted LVM disk.</li>\n<li><code>-p</code>  prevents pseudo-filesystems from being added.</li>\n</ul>\n<pre><code>root$ genfstab -L -p /mnt &gt;&gt; /mnt/etc/fstab\nroot$ cat /mnt/etc/fstab\n</code></pre>\n<h2 id=\"configure-the-new-system\"><a class=\"markdownIt-Anchor\" href=\"#configure-the-new-system\">#</a> Configure the New System</h2>\n<p>Chroot into our new system:</p>\n<pre><code>root$ arch-chroot /mnt /bin/bash\n</code></pre>\n<p>Generate locales:</p>\n<ul>\n<li>uncomment the locales you’re going to use in /etc/locale.gen, and run  <code>locale-gen</code> .</li>\n<li>run  <code>echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</code>  to make ENG UTF-8 the default locale.</li>\n</ul>\n<p>Replace the default console font with terminus:</p>\n<pre><code>root$ pacman -S terminus-font\nroot$ echo FONT=ter-v24n &gt; /etc/vconsole.conf\n</code></pre>\n<p>Set timezone and set time to UTC:</p>\n<pre><code>root$ ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime\nroot$ hwclock --systohc --utc\n</code></pre>\n<p>To ensure the kernel loads the proper modules to decrypt root disk at startup, we have to add necessary hooks in  <code>/etc/mkinitcpio.conf</code> :</p>\n<pre><code>HOOKS=&quot;base udev autodetect keyboard keymap modconf block consolefont encrypt lvm2 filesystems fsck&quot;\n</code></pre>\n<p>Regenerate the initramfs image to EFI Partition ( <code>/dev/nvme0n1p1</code> ):</p>\n<pre><code>root$ mkinitcpio -p linux\n</code></pre>\n<p>Set hostname:</p>\n<pre><code>root$ echo allegro &gt; /etc/hostname\n</code></pre>\n<p>Install systemd-boot as our bootloader:</p>\n<pre><code>root$ pacman -S dosfstools\nroot$ bootctl --path=/boot install\n</code></pre>\n<p>Add an boot entry for systemd-boot by editing  <code>/boot/loader/entries/arch.conf</code> :</p>\n<pre><code>title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\tcryptdevice=/dev/nvme0n1p2:vgcrypt root=/dev/mapper/vgcrypt-root rw\n</code></pre>\n<p>Change root user’s password:</p>\n<pre><code>root$ passwd\n</code></pre>\n<p>Install additional packages:</p>\n<pre><code>root$ pacman -S dhcpcd git zsh vim neovim wget stow tmux\n</code></pre>\n<p>Reboot:</p>\n<pre><code>root$ reboot\n</code></pre>\n<p>Add an unprivileged user:</p>\n<pre><code>root$ useradd --create-home --groups wheel --shell /bin/zsh aesophor\nroot$ passwd aesophor\n</code></pre>\n<p>Set up sudo:</p>\n<ul>\n<li>run  <code>visudo</code>  and uncomment the line  <code>%wheel ALL=(ALL) ALL</code> .</li>\n</ul>\n<p>At this point, you may logout the root user and re-login with your unprivileged user.</p>\n<h2 id=\"post-installation\"><a class=\"markdownIt-Anchor\" href=\"#post-installation\">#</a> Post Installation</h2>\n<p>Install <a href=\"https://github.com/Jguer/yay\"> <code>yay</code> </a>, an AUR helper:</p>\n<pre><code>user$ git clone https://aur.archlinux.org/yay.git\nuser$ cd yay\nuser$ sudo makepkg -si\n</code></pre>\n<p>Install X and video drivers:</p>\n<pre><code>user$ sudo pacman -S xf86-video-intel mesa-libgl libva-intel-driver libva\nuser$ yay -S opencl-intel\nuser$ sudo pacman -S xorg-server xorg-xinit xorg-apps\n</code></pre>\n<p>Install  <code>xf86-input-mtrack</code>  as our trackpad driver:</p>\n<pre><code>user$ yay -S xf86-input-mtrack\nuser$ sudo wget -O /etc/X11/xorg.conf.d/10-mtrack.conf https://raw.githubusercontent.com/aesophor/macbookpro-11-2-gentoo-config/master/etc/X11/xorg.conf.d/10mtrack.conf\nuser$ sudo gpasswd -a aesophor input\n</code></pre>\n<p>Install  <code>broadcom-wl-dkms</code>  as our Wi-Fi driver (my laptop model is A1398):</p>\n<pre><code>user$ sudo pacman -S dkms broadcom-wl-dkms\n</code></pre>\n<p>Install  <code>bcwc-pcie-git</code>  as our FaceTimeHD webcam driver:</p>\n<pre><code>user$ yay -S bcwc-pcie-git\n</code></pre>\n<p>Install font packages:</p>\n<pre><code>user$ sudo pacman -S ttf-liberation wqy-zenhei wqy-bitmapfont\nuser$ yay -S siji-git uw-ttyp0-font\n</code></pre>\n<p>Get audio to work:</p>\n<pre><code>user$ sudo pacman -S pulseaudio alsa-lib alsa-utils\n</code></pre>\n<p>Install DE, WM, bar, etc:</p>\n<pre><code>user$ sudo pacman -S plasma-desktop\nuser$ yay -S wmderland-git polybar dunst picom rofi-git rxvt-unicode firefox\n</code></pre>\n<p>Install fcitx5 input method:</p>\n<pre><code>user$ sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-gtk fcitx5-qt fcitx5-material-color\nuser$ yay -S fcitx5-pinyin-zhwiki\n</code></pre>\n<p>Downgrade  <code>pango</code>  to 1.43 since &gt;= 1.44 cause issue with font rendering on rofi:</p>\n<pre><code>user$ sudo pacman -U https://archive.archlinux.org/packages/p/pango/pango-1.43.0-1-x86_64.pkg.tar.xz\n</code></pre>\n<p>Powersaving:</p>\n<pre><code>user$ yay -S powertop thermald cpupower mbpfan-git\nuser$ sudo systemctl enable thermald.service\nuser$ sudo systemctl enable cpupower.service\nuser$ sudo systemctl enable mbpfan.service\n</code></pre>\n<p>Finally, create systemd services that execute the following commands, respectively:</p>\n<ul>\n<li>echo ‘disable’ &gt; /sys/firmware/acpi/interrupts/gpe06  # fix kworker high cpu usage</li>\n<li>echo “XHC1” &gt; /proc/acpi/wakeup  # fix immediate wakeup after suspension on macbook</li>\n<li>setpci -v -H1 -s 00:01.00 BRIDGE_CONTROL=0  # enable keyboard backlight control</li>\n</ul>\n<h2 id=\"enter-x11\"><a class=\"markdownIt-Anchor\" href=\"#enter-x11\">#</a> Enter X11</h2>\n<p>Install my dotfiles:</p>\n<pre><code>user$ git clone https://github.com/aesophor/dotfiles.git ~/Dots\nuser$ cd ~/Dots\nuser$ rm ~/.zshrc ~/.bashrc\nuser$ ./.install.sh\n</code></pre>\n<p>Start an X11 session (GUI) as your unprivileged user:</p>\n<pre><code>user$ startx\n</code></pre>\n<p>Voilà. Now you can go ahead and start customizing it!<br>\n<img data-src=\"result.png\" alt=\"\"></p>\n",
            "tags": [
                "linux"
            ]
        }
    ]
}