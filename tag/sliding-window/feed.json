{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"sliding-window\" tag",
    "description": "{software,reverse} engineer",
    "home_page_url": "https://aesophor.github.io",
    "items": [
        {
            "id": "https://aesophor.github.io/2022/08/21/LC-0003-Longest-Substring-Without-Repeating-Characters/",
            "url": "https://aesophor.github.io/2022/08/21/LC-0003-Longest-Substring-Without-Repeating-Characters/",
            "title": "LC#0003 - Longest Substring Without Repeating Characters",
            "date_published": "2022-08-21T12:00:05.000Z",
            "content_html": "<h1 id=\"problem\"><a class=\"markdownIt-Anchor\" href=\"#problem\">#</a> Problem</h1>\n<p>給定一字串  <code>s</code> ，請找出不包含重複字元的 substring 的最長長度。</p>\n<h1 id=\"examples\"><a class=\"markdownIt-Anchor\" href=\"#examples\">#</a> Examples</h1>\n<pre><code>Input: s = &quot;abcabcbb&quot;\nOutput: 3\nExplanation: The answer is &quot;abc&quot;, with the length of 3.\n</code></pre>\n<pre><code>Input: s = &quot;bbbbb&quot;\nOutput: 1\nExplanation: The answer is &quot;b&quot;, with the length of 1.\n</code></pre>\n<pre><code>Input: s = &quot;pwwkew&quot;\nOutput: 3\nExplanation: The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</code></pre>\n<pre><code>Input: s = &quot;abba&quot;\nOutput: 2\nExplanation: The answer is &quot;ab&quot;, with the length of 2.\n</code></pre>\n<h1 id=\"solution\"><a class=\"markdownIt-Anchor\" href=\"#solution\">#</a> Solution</h1>\n<p><strong>Sliding Window Algorithm</strong></p>\n<p>維護兩個 index：  <code>l</code>  和  <code>r</code> ，分別代表 window 左界與右界，window 內的每個字元都是獨特的，不能重複。</p>\n<p>接著線性掃描字串  <code>s</code> ，不斷將右界往右擴展：</p>\n<ol>\n<li>若  <code>s[r]</code>  和 window 內某字元重複，且假設兩個重複字元在  <code>s</code>  中的 index 分別為 k 和 r，就將左界更新為  <code>k + 1</code></li>\n<li>計算 window 長度 (i.e., r - l + 1)，必要時更新 max_len</li>\n<li>紀錄  <code>s[r]</code>  最後一次出現時的 index</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> max_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> appearedCharIdx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// If `s[r]` has already appeared before, and `s[r]`</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// is within the current window, then we should adjust</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// the left window boundary.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>appearedCharIdx<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> appearedCharIdx<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        l <span class=\"token operator\">=</span> appearedCharIdx<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      max_len <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max_len<span class=\"token punctuation\">,</span> r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      appearedCharIdx<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token operator\">++</span>r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> max_len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"complexity-analysis\"><a class=\"markdownIt-Anchor\" href=\"#complexity-analysis\">#</a> Complexity Analysis</h1>\n<ul>\n<li><strong>Time: O(n)</strong> - sliding window 只需將 s 從頭到尾掃描一次</li>\n<li><strong>Space: O(n)</strong> - worst case 時 appearedCharIdx.size () 逼近 s.size ()</li>\n</ul>\n<h1 id=\"result\"><a class=\"markdownIt-Anchor\" href=\"#result\">#</a> Result</h1>\n<pre><code>Runtime: 11 ms, faster than 84.71% of C++ online submissions for Longest Substring Without Repeating Characters.\nMemory Usage: 8.1 MB, less than 82.70% of C++ online submissions for Longest Substring Without Repeating Characters.\n</code></pre>\n",
            "tags": [
                "leetcode",
                "sliding-window"
            ]
        }
    ]
}