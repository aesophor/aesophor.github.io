{
    "version": "https://jsonfeed.org/version/1",
    "title": "null ‚Ä¢ All posts by \"reverse engineering\" tag",
    "description": "eku",
    "home_page_url": "https://aesophor.github.io",
    "items": [
        {
            "id": "https://aesophor.github.io/2023/05/19/C-Polymorphism-VTables-and-Game-Hacking/",
            "url": "https://aesophor.github.io/2023/05/19/C-Polymorphism-VTables-and-Game-Hacking/",
            "title": "C++ Polymorphism, vtables, and Game Hacking",
            "date_published": "2023-05-19T12:36:10.000Z",
            "content_html": "<p><img data-src=\"banner.png\" alt=\"banner\"></p>\n<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<p>Before we begin, I assume that you already have a good understanding of Object-Oriented Programming and know about the three pillars of OOP: (1) Encapsulation, (2) Inheritance, and (3) Polymorphism. Additionally, you should already be able to easily distinguish between (1) Funciton overloading and (2) Function overriding. The remainder of this post is structured as follows:</p>\n<ol>\n<li>Object-Oriented Programming in C++</li>\n<li>vtables: How C++ polymorphism works under the hood</li>\n<li>Case study: Reverse engineering vtables in real-world binaries (CS:GO)</li>\n</ol>\n<h1 id=\"object-oriented-programming-in-c\"><a class=\"markdownIt-Anchor\" href=\"#object-oriented-programming-in-c\">#</a> Object-Oriented Programming in C++</h1>\n<h2 id=\"upcasting-and-downcasting\"><a class=\"markdownIt-Anchor\" href=\"#upcasting-and-downcasting\">#</a> Upcasting and Downcasting</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ellipse</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Circle <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// [1]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Circle <span class=\"token operator\">*</span>e1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Ellipse</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// [2]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Ellipse <span class=\"token operator\">*</span>e2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dynamic_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Ellipse <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [3] if dynamic_cast() fails, e2 will be a nullptr.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Case 1\n<ul>\n<li>We are about to create and initialize a new Circle object.</li>\n<li>We allocate memory using  <code>operator new</code>  and obtain  <code>c</code> , the address of our new Circle object.</li>\n<li><code>c</code>  as well as an additional argument  <code>5</code>  are passed to the constructor of Circle.</li>\n<li>The constructor of Circle initializes our new object.</li>\n<li>The address of our new Circle object is stored in a pointer to a Circle.</li>\n</ul>\n</li>\n<li>Case 2: <strong>upcasting</strong>\n<ul>\n<li>Ellipse derives from its base class, Circle</li>\n<li>In C++, it is perfectly legal to assign a derived class‚Äôs pointer to a base class‚Äôs pointer, or bind a derived class‚Äôs reference to a base class‚Äôs reference.</li>\n<li>What if we want to do this in reverse? The answer is downcasting.</li>\n</ul>\n</li>\n<li>Case 3: <strong>downcasting</strong>\n<ul>\n<li>If we need to cast  <code>e1</code>  (a Circle) back to an Ellipse again, we need to explicitly downcast it.</li>\n<li>If the underlying object pointed to by  <code>e1</code>  is indeed an Ellipse, then dynamic_cast() will succeed.</li>\n<li>Otherwise, dynamic_cast() will return a nullptr.</li>\n<li>An ellipse is surely a circle, but a circle isn‚Äôt necessarily an ellipse, right? ü§ì</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"overriding-virtual-methods\"><a class=\"markdownIt-Anchor\" href=\"#overriding-virtual-methods\">#</a> Overriding Virtual Methods</h2>\n<p>In C++, if a ‚Äúmember function‚Äù (or ‚Äúmethod‚Äù) is declared  <code>virtual</code> , then it will be polymorphic at runtime. Let‚Äôs take a look at this example:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">GetArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Circle::GetArea()\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span>numbers<span class=\"token double-colon punctuation\">::</span>pi <span class=\"token operator\">*</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>radius_<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ellipse</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// Since Circle::GetArea() is already virtual, Ellipse::GetArea() will also be implicitly virtual.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// As a result, it's not mandatory to write virtual here. However, I believe that it's always a</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// good practice to mark the overridden methods as virtual, since this makes the function prototype</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// more self-documenting.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">GetArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Ellipse::GetArea()\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span>numbers<span class=\"token double-colon punctuation\">::</span>pi <span class=\"token operator\">*</span> radius_a_ <span class=\"token operator\">*</span> radius_b_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Circle<span class=\"token operator\">></span> c1 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Circle<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  c1<span class=\"token operator\">-></span><span class=\"token function\">GetArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>Circle<span class=\"token operator\">></span> c2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Ellipse<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  c2<span class=\"token operator\">-></span><span class=\"token function\">GetArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>$ clang++ -std=c++20 -o out po.cc &amp;&amp; ./out\nCircle::GetArea()\nEllipse::GetArea()\n</code></pre>\n<p>In the above program:</p>\n<ul>\n<li>We have two classes:  <code>Circle</code>  and  <code>Ellipse</code> , where  <code>Ellipse</code>  derives from  <code>Circle</code> .\n<ul>\n<li><code>Ellipse::GetArea()</code>  overrides  <code>Circle::GetArea()</code> .</li>\n</ul>\n</li>\n<li>In main()\n<ul>\n<li><code>c1</code>  points to an instance of Circle, and its type is  <code>shared_ptr&lt;Circle&gt;</code></li>\n<li><code>c2</code>  points to an instance of Ellipse, but its type is also  <code>shared_ptr&lt;Circle&gt;</code></li>\n</ul>\n</li>\n<li>Question:\n<ul>\n<li><code>c2</code>  is of type  <code>shared_ptr&lt;Circle&gt;</code></li>\n<li>When we invoke  <code>c2-&gt;GetArea()</code> , which method will be called?</li>\n<li><code>Circle::GetArea()</code>  or  <code>Ellipse::GetArea()</code> ?</li>\n</ul>\n</li>\n<li>Answer:\n<ul>\n<li><code>Ellipse::GetArea()</code></li>\n<li>Reason: Although an ellipse can be viewed as a circle, but when we need to calculate its area, we want to use the correct formula.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"vtables-how-c-polymorphism-works-under-the-hood\"><a class=\"markdownIt-Anchor\" href=\"#vtables-how-c-polymorphism-works-under-the-hood\">#</a> vtables: How C++ polymorphism works under the hood</h1>\n<blockquote>\n<p>You: So, you‚Äôre telling me that the above program knows the underlying type  <code>c2</code>  points to is actually an Ellipse, not a Circle?<br>\naesophor: Yes, exactly.</p>\n</blockquote>\n<blockquote>\n<p>You: Wait! How is that possible?<br>\naesophor: This magic is thanks to ‚Äúvtable‚Äù, and we‚Äôre going to demystify it now.</p>\n</blockquote>\n<p>In this section, we discuss three types of inheritance in C++, and how vtables look under these circumstances.</p>\n<h2 id=\"single-inheritance\"><a class=\"markdownIt-Anchor\" href=\"#single-inheritance\">#</a> Single Inheritance</h2>\n<p>When a class has at least one virtual method (including those inherited from its base classes), then through gdb we can see the first 8 bytes is  <code>_vptr</code> , a pointer to the vtable of this class. All of its data members will be placed after  <code>_vptr</code> .</p>\n<ul>\n<li>The  <code>Derived</code>  class overrides the method  <code>foo()</code></li>\n<li>In the vtable of  <code>Derived</code> , the first virtual function is  <code>Derived::foo()</code> , not  <code>Parent::foo()</code> .</li>\n</ul>\n<p><img data-src=\"single.png\" alt=\"\"></p>\n<h2 id=\"multiple-inheritance\"><a class=\"markdownIt-Anchor\" href=\"#multiple-inheritance\">#</a> Multiple Inheritance</h2>\n<p>Before we talk about multiple inheritance, we need to clarify two terms: (1) primary base (2) secondary bases.<br>\nThese terms are borrowed from: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWZzcGVjcy5saW51eGJhc2Uub3JnL2N4eGFiaS0xLjc1Lmh0bWw=\">Itanium C++ ABI (Revision: 1.75)</span>. In short:</p>\n<pre><code>class Child : public Base1, public Base2, public Base3, ..., public BaseN &#123;\n              |__________|  |___________________________________________|\n              Primary Base                Secondary Bases\n</code></pre>\n<p>In the following example, the class  <code>Child</code>  derives from  <code>Mother</code> ,  <code>Father</code>  and  <code>Aunt</code>  (not so ethical‚Ä¶)</p>\n<ul>\n<li><code>Mother</code>  is the primary base class, and it shares the same vtable with  <code>Child</code> .</li>\n<li><code>Father</code>  is one of the secondary base classes, and it has a standalone vtable.</li>\n<li><code>Aunt</code>  is also one of the secondary base classes, and it has a standalone vtable.</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mother</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mother_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">father_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aunt</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">aunt_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Mother</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Aunt</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">child_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Child c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>With gdb, we can prove that the aforementioned rules about vtables are correct.</p>\n<pre><code>00:0000‚îÇ rsp 0x7fffffffe040 ‚Äî‚ñ∏ 0x555555557ce0 ‚Äî‚ñ∏ 0x555555555272 (Mother::mother_foo()) ‚óÇ‚Äî endbr64\n01:0008‚îÇ     0x7fffffffe048 ‚Äî‚ñ∏ 0x555555557d00 ‚Äî‚ñ∏ 0x555555555282 (Father::father_foo()) ‚óÇ‚Äî endbr64\n02:0010‚îÇ     0x7fffffffe050 ‚Äî‚ñ∏ 0x555555557d18 ‚Äî‚ñ∏ 0x555555555292 (Aunt::aunt_foo()) ‚óÇ‚Äî endbr64\n03:0018‚îÇ     0x7fffffffe058 ‚óÇ‚Äî 0x696db6e89b61aa00\n04:0020‚îÇ rbp 0x7fffffffe060 ‚óÇ‚Äî 0x0\n05:0028‚îÇ     0x7fffffffe068 ‚Äî‚ñ∏ 0x7ffff7bc7083 (__libc_start_main+243) ‚óÇ‚Äî mov    edi, eax\n</code></pre>\n<p>Now, let‚Äôs look at my slides for a more distilled example</p>\n<ul>\n<li><code>Mother::mother_foo()</code>  and  <code>Child::child_foo()</code>  are placed within the same vtable.</li>\n<li>The virtual functions from the primary base class comes first, and then those from the derived class follow.</li>\n</ul>\n<p><img data-src=\"multi-1.png\" alt=\"\"></p>\n<p>What if  <code>Child</code>  overrides a virtual function in a secondary base class, you ask‚Ä¶</p>\n<ul>\n<li>A new vtable entry is added to the primary vtable:  <code>Child::father_foo()</code></li>\n<li>In Father‚Äôs vtable,  <code>Father::father_foo()</code>  is replaced with a  <code>non-virtual thunk to Child::father_foo()</code>  ü§î</li>\n<li>So if we cast a  <code>Child *</code>  to a  <code>Father *</code>  and invoke  <code>father_foo()</code> ‚Ä¶\n<ul>\n<li>it will adjust  <code>this</code>  pointer by  <code>-0x10</code>  (offset_to_top)</li>\n<li>call the 2nd virtual function in the primary vtable.</li>\n<li>i.e.  <code>Child::father_foo(/*this=*/rdi - 0x10)</code></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"multi-2.png\" alt=\"\"></p>\n<h2 id=\"virtual-inheritance\"><a class=\"markdownIt-Anchor\" href=\"#virtual-inheritance\">#</a> Virtual Inheritance</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmlydHVhbF9pbmhlcml0YW5jZQ==\">Virtual inheritance</span> in C++ is a technique to eliminate the ‚Äúdiamond of death‚Äù by ensuring only one copy of a base class‚Äôs member variables are inherited by grandchild derived classes. Let‚Äôs take a look at an example from libstdc++ 10.2.0:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Templates omitted for simplicity.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ios_base</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">basic_ios</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ios_base</span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">basic_istream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">basic_ios</span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">basic_ostream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">basic_ios</span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">basic_iostream</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">basic_istream</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">basic_ostream</span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Without virtual inheritance, the data members of  <code>basic_ios</code>  will be passed down twice to the most derived class  <code>basic_iostream</code>  (one via  <code>basic_istream</code> , one via  <code>basic_ostream</code> ), resulting in ambiguous and duplicated data members in  <code>basic_iostream</code> . To understand the layout of vtables under virtual inheritance, let‚Äôs begin with the simplest scenario:</p>\n<p><img data-src=\"virt-single-1.png\" alt=\"\"></p>\n<p>In single inheritance and multiple inheritance, the derived class will share the same vtable ( <code>_vptr (primary)</code> ) with the primary base class. However, with virtual inheritance, the virtual primary base class will always have a standalone vtable ( <code>_vptr (vbase)</code> ). What‚Äôs more, a new entry is added to the beginning of all vtables involved:  <code>virtual_base_offset</code> . This offset ensures that all parent‚Äôs data members will only have one copy, and that they will be stored in a single place (subsequent to  <code>_vptr (vbase)</code> ) instead of being stored next to  <code>_vptr (primary)</code> .</p>\n<p>Next, let‚Äôs see what happens if we override a parent‚Äôs virtual member function. In the following example, the derived class  <code>B</code>  overrides  <code>foo()</code>  from its base class  <code>A</code> .</p>\n<p><img data-src=\"virt-single-2.png\" alt=\"\"></p>\n<p>Similar to what happened with multiple inheritance as we discussed earlier, a new entry is inserted into the primary vtable ( <code>_vptr (primary)</code> , and the original entry in the virtual vtable ( <code>_vptr (vbase)</code> ) is now replaced with a  <code>virtual thunk to B::foo()</code> . If you recall, we‚Äôve seen a ‚Äúnon-virtual thunk to XXX‚Äù before, and this time it‚Äôs called a ‚Äúvirtual thunk to XXX‚Äù. Quite interesting‚Ä¶ ü§î</p>\n<p>Finally, let‚Äôs consider the most complicated scenario: <strong>The Diamond of Death</strong>. In the below example, We can see that both  <code>B</code>  and  <code>C</code>  virtually inherits from  <code>A</code> , and thanks to virtual inheritance, there‚Äôs only one copy of  <code>A</code> 's data members (they are placed in  <code>_vptr (vbase)</code> ).</p>\n<p><img data-src=\"virt-diamond-1.png\" alt=\"\"></p>\n<p>Let‚Äôs see what happen if we override a virtual member function from  <code>A</code> . Familiar things happen again!</p>\n<p><img data-src=\"virt-diamond-2.png\" alt=\"\"></p>\n<h1 id=\"case-study-reverse-engineering-c-vtables-in-real-world-binaries\"><a class=\"markdownIt-Anchor\" href=\"#case-study-reverse-engineering-c-vtables-in-real-world-binaries\">#</a> Case Study: Reverse Engineering C++ vtables in Real-World Binaries</h1>\n<p>In the last section, we demonstrate how to apply our knowledge in reverse engineering C++ vtable to game hacking. More specifically, we‚Äôll take the x86_64 macOS game client of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdG9yZS5zdGVhbXBvd2VyZWQuY29tL2FwcC83MzAvQ291bnRlclN0cmlrZV9HbG9iYWxfT2ZmZW5zaXZlLw==\">Counter Strike: Global Offensive</span>, reverse engineer it, and create an internal cheat with aimbot (Ëá™ÁûÑÂ§ñÊéõ).</p>\n<p><a href=\"https://www.youtube.com/watch?v=YqYvJTnBTu0\"><img data-src=\"csgo-aimbot.png\" alt=\"\"></a></p>\n<h2 id=\"inspecting-the-game-client\"><a class=\"markdownIt-Anchor\" href=\"#inspecting-the-game-client\">#</a> Inspecting the Game Client</h2>\n<pre><code>$ file '~/Library/Application Support/Steam/steamapps/common/Counter-Strike Global Offensive/csgo/bin/osx64/client.dylib'\nclient.dylib: Mach-O 64-bit dynamically linked shared library x86_64\n</code></pre>\n<h2 id=\"background\"><a class=\"markdownIt-Anchor\" href=\"#background\">#</a> Background</h2>\n<p>From <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIudmFsdmVzb2Z0d2FyZS5jb20vd2lraS9Vc2VyY21k\">Valve Developer Wiki</span>:</p>\n<blockquote>\n<ol>\n<li>CUserCmd (‚Äúuser command‚Äù) is the networkable representation of the player‚Äôs input, including keys pressed and viewangle.</li>\n<li>Usercmds intended for transmission to the server are created when the engine invokes IBaseClientDLL::CreateMove (once per tick). The usercmds created are stored in a circular buffer (CInput::PerUserInput_t::m_pCommands) until the engine invokes IBaseClientDLL::WriteUsercmdDeltaToBuffer to compress and serialize them to the server.</li>\n</ol>\n</blockquote>\n<p>So the information of the player‚Äôs input (including the keys pressed and the current viewangle) is collected into a  <code>CUserCmd</code> , buffered in a circular buffer, and then sent to the game server.</p>\n<blockquote>\n<p>The current client mode is also given a chance to manipulate the newly created usercmd via IClientMode::CreateMove.</p>\n</blockquote>\n<p>So what if we can intercept the  <code>CUserCmd</code> s and edit them before they‚Äôre sent to the server? ü§Ø</p>\n<blockquote>\n<p>The default implementation (ClientModeShared::CreateMove) delegates to the local player via C_BasePlayer::CreateMove, which in turn passes the usercmd to CBaseCombatWeapon::CreateMove on the active weapon.</p>\n</blockquote>\n<p>By inspecting the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Blcmlsb3Vzd2l0aGFkb2xsYXJzaWduL2NzdHJpa2UxNV9zcmMuZ2l0\">leaked codebase from 2013</span>, we can actually find the piece of code matching the above description.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// game/client/clientmode_shared.cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">ClientModeShared</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> flInputSampleTime<span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  C_BasePlayer <span class=\"token operator\">*</span>pPlayer <span class=\"token operator\">=</span> <span class=\"token class-name\">C_BasePlayer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetLocalPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pPlayer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> pPlayer<span class=\"token operator\">-></span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>flInputSampleTime<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// game/client/c_baseplayer.cpp</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">C_BasePlayer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> flInputSampleTime<span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span>pCmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  CBaseCombatWeapon <span class=\"token operator\">*</span>pWeapon <span class=\"token operator\">=</span> <span class=\"token function\">GetActiveWeapon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pWeapon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    pWeapon<span class=\"token operator\">-></span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>flInputSampleTime<span class=\"token punctuation\">,</span> pCmd<span class=\"token punctuation\">,</span> m_vecOldViewAngles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"analysis\"><a class=\"markdownIt-Anchor\" href=\"#analysis\">#</a> Analysis</h2>\n<p>Here are the definitions of  <code>ClientModeShared</code>  and its primary base class,  <code>IClientMode</code> .</p>\n<ul>\n<li>Both IClientMode and ClientModeShared will share the same vtable.</li>\n<li>The order of virtual functions appeared in the primary vtable will be the same as how they are declared in the base class.</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// game/client/clientmode_shared.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientModeShared</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">IClientMode</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">CGameEventListener</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">DECLARE_CLASS_NOBASE</span><span class=\"token punctuation\">(</span> ClientModeShared <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">ClientModeShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ClientModeShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">InitViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">VGui_Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ProcessInput</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bActive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> flInputSampleTime<span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// game/client/iclientmode.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>abstract_class IClientMode <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">IClientMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// Called before the HUD is initialized.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">InitViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">VGui_Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// Called when switching from one IClientMode to another.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// This can re-layout the view and such.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// Note that Enable and Disable are called when the DLL initializes and shuts down.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">EnableWithRootPanel</span><span class=\"token punctuation\">(</span>vgui<span class=\"token double-colon punctuation\">::</span>VPANEL pRoot<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OverrideMouseInput</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> flInputSampleTime<span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">LevelInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>newmap<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">LevelShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"finding-the-index-of-createmove-in-the-vtable-of-iclientmode\"><a class=\"markdownIt-Anchor\" href=\"#finding-the-index-of-createmove-in-the-vtable-of-iclientmode\">#</a> Finding the Index of  <code>CreateMove()</code>  in the vtable of  <code>IClientMode</code></h2>\n<p>As of now, we know about two things:</p>\n<ul>\n<li>From Valve Developer Wiki,  <code>IClientMode::CreateMove()</code>  has a chance to edit the  <code>CUserCmd</code>  before it is sent to the server.</li>\n<li>If we can leverage <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yODg4ODAwMDA5LmdpdGh1Yi5pby9zb2Z0d2FyZS9zZWN1cml0eS9iaW5hcnkvdnRhYmxlLWhpamFja2luZy8=\">vtable hijacking</span> and overwrite the address of  <code>CreateMove()</code>  in the vtable, our cheat will have a chance to r/w CUserCmd.\n<ul>\n<li>ClientModeShared::CreateMove() calls C_BasePlayer::CreateMove().</li>\n<li>IClientMode is the primary base class of ClientModeShared, so they share the same vtable.</li>\n<li>Now we need to find the index of  <code>CreateMove()</code>  within the vtable of  <code>IClientMode</code> .</li>\n</ul>\n</li>\n</ul>\n<p>A commonly used technique to find the index of a virtual function within a vtable is leveraging string literals. If we read ClientModeShared::CreateMove() and C_BasePlayer::CreateMove(), we‚Äôll only find out that there are no useful string literals in these two functions. üòì Luckily, in  <code>ClientModeShared::LevelInit()</code> , there are <strong>three string literals</strong>!</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">ClientModeShared</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">LevelInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>newmap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  m_pViewport<span class=\"token operator\">-></span><span class=\"token function\">GetAnimationController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">StartAnimationSequence</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LevelInit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// Tell the Chat Interface</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pChatElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    m_pChatElement<span class=\"token operator\">-></span><span class=\"token function\">LevelInit</span><span class=\"token punctuation\">(</span>newmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// we have to fake this event clientside, because clients connect after that</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  IGameEvent <span class=\"token operator\">*</span>event <span class=\"token operator\">=</span> gameeventmanager<span class=\"token operator\">-></span><span class=\"token function\">CreateEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"game_newmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    event<span class=\"token operator\">-></span><span class=\"token function\">SetString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mapname\"</span><span class=\"token punctuation\">,</span> newmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    gameeventmanager<span class=\"token operator\">-></span><span class=\"token function\">FireEventClientSide</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// Create a vgui context for all of the in-game vgui panels...</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_hVGuiContext <span class=\"token operator\">==</span> DEFAULT_VGUI_CONTEXT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    s_hVGuiContext <span class=\"token operator\">=</span> vgui<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ivgui</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">CreateContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// Reset any player explosion/shock effects</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  CLocalPlayerFilter filter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  enginesound<span class=\"token operator\">-></span><span class=\"token function\">SetPlayerDSP</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>We‚Äôll choose the string ‚ÄúLevelInit‚Äù. Search it in IDA.</p>\n<p><img data-src=\"ida-levelinit-search.png\" alt=\"\"></p>\n<p><img data-src=\"ida-levelinit-search-result.png\" alt=\"\"></p>\n<p>Bingo! The first one is  <code>ClientModeShared::LevelInit()</code>  (sub_1639A0)</p>\n<p><img data-src=\"ida-levelinit-bingo.png\" alt=\"\"></p>\n<p>Decompile it, just to make sure it really is the one we‚Äôre looking for. LGTM. ü§§</p>\n<p><img data-src=\"ida-levelinit-decompiled.png\" alt=\"\"></p>\n<p>List all the xrefs to  <code>sub_1639A0</code> , and here the second one is the vtable entry we‚Äôre looking for.</p>\n<p><img data-src=\"ida-levelinit-xref.png\" alt=\"\"></p>\n<p>Let‚Äôs take a look at the vtable‚Ä¶  <code>LevelInit()</code> 's index is 26, so  <code>CreateMove()</code> 's index will be 25.</p>\n<p><img data-src=\"ida-levelinit-vtable.png\" alt=\"\"></p>\n<h2 id=\"exploitation\"><a class=\"markdownIt-Anchor\" href=\"#exploitation\">#</a> Exploitation</h2>\n<p>I‚Äôm running x86_64 CS:GO on my M1 Pro MacBook Pro through rosetta2, so we‚Äôll compile and link our cheat into a x86_64 dylib, and then use lldb to inject it into the CS:GO process. The piece of code that hijacks the vtable of  <code>IClientMode</code>  will look something like this:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">OnDylibLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// Obtain the `this` pointer to `ClientModeShared`.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">auto</span> clientMode <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IClientMode <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">GetClientMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// Backup the address of the original CreateMove().</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">using</span> CreateMoveFn <span class=\"token operator\">=</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>IClientMode <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  CreateMoveFn originalCreateMove <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">GetVFunc</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CreateMoveFn<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>clientMode<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// Overwrite the address of CreateMove() with our own CreateMove().</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  memory<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">PutVFunc</span><span class=\"token punctuation\">(</span>clientMode<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> CreateMoveHook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// The original method prototype is: IClientMode::CreateMove().</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// So the first argument will be the `this` pointer. Furthermore,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// since IClientMode is the primary base class of ClientModeShared,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// so using `IClientMode *` and `ClientModeShared` are both okay</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// since they will have the same address.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>IClientMode <span class=\"token operator\">*</span>thisptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> frameTime<span class=\"token punctuation\">,</span> CUserCmd <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>prediction<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">StartPrediction</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>bhop<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>antiaim<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>autostrafe<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>aimbot<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateMove</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  hacks<span class=\"token double-colon punctuation\">::</span>prediction<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">EndPrediction</span><span class=\"token punctuation\">(</span>localPlayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Here‚Äôs my <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Flc29waG9yL2hhdm9jLmNj\">full source code of my CS:GO cheat</span>, but I won‚Äôt provide any instructions or tutorials on building the project. If you want to receive a pre-compiled dylib instead of figuring out by yourself, contact me m.aesophor [at] <span class=\"exturl\" data-url=\"aHR0cDovL2dtYWlsLmNvbQ==\">gmail.com</span> for a price.</p>\n",
            "tags": [
                "cpp",
                "reverse engineering"
            ]
        }
    ]
}